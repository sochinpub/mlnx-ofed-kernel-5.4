From: Tom Wu <tomwu@nvidia.com>
Subject: [PATCH] BACKPORT: net/sunrpc/xprtrdma/transport.c

Change-Id: Iae4b8eebab145d98b71b7b359f1bc50c1aca0ff1
---
 net/sunrpc/xprtrdma/transport.c | 116 +++++++++++++++++++++++++++++++-
 1 file changed, 114 insertions(+), 2 deletions(-)

--- a/net/sunrpc/xprtrdma/transport.c
+++ b/net/sunrpc/xprtrdma/transport.c
@@ -58,7 +58,9 @@
 #include <linux/sunrpc/svc_rdma.h>
 
 #include "xprt_rdma.h"
+#ifdef HAVE_TRACE_RPCRDMA_H
 #include <trace/events/rpcrdma.h>
+#endif
 
 #if IS_ENABLED(CONFIG_SUNRPC_DEBUG)
 # define RPCDBG_FACILITY	RPCDBG_TRANS
@@ -84,6 +86,9 @@ static unsigned int max_padding = PAGE_S
 static unsigned int min_memreg = RPCRDMA_BOUNCEBUFFERS;
 static unsigned int max_memreg = RPCRDMA_LAST - 1;
 static unsigned int dummy;
+#ifndef HAVE_SYSCTL_ZERO_ENABLED
+static unsigned int zero;
+#endif
 
 static struct ctl_table_header *sunrpc_table_header;
 
@@ -121,7 +126,11 @@ static struct ctl_table xr_tunables_tabl
 		.maxlen		= sizeof(unsigned int),
 		.mode		= 0644,
 		.proc_handler	= proc_dointvec_minmax,
+#ifdef HAVE_SYSCTL_ZERO_ENABLED
 		.extra1		= SYSCTL_ZERO,
+#else
+		.extra1		= &zero,
+#endif
 		.extra2		= &max_padding,
 	},
 	{
@@ -154,7 +163,11 @@ static struct ctl_table sunrpc_table[] =
 
 #endif
 
+#ifdef HAVE_RPC_XPRT_OPS_CONST
 static const struct rpc_xprt_ops xprt_rdma_procs;
+#else
+static struct rpc_xprt_ops xprt_rdma_procs;
+#endif
 
 static void
 xprt_rdma_format_addresses4(struct rpc_xprt *xprt, struct sockaddr *sap)
@@ -270,7 +283,9 @@ xprt_rdma_inject_disconnect(struct rpc_x
 {
 	struct rpcrdma_xprt *r_xprt = rpcx_to_rdmax(xprt);
 
+#ifdef HAVE_TRACE_RPCRDMA_H
 	trace_xprtrdma_op_inject_dsc(r_xprt);
+#endif
 	rdma_disconnect(r_xprt->rx_ep->re_id);
 }
 
@@ -322,16 +337,24 @@ xprt_setup_rdma(struct xprt_create *args
 	if (!try_module_get(THIS_MODULE))
 		return ERR_PTR(-EIO);
 
+#ifdef HAVE_RPC_XPRT_OPS_FREE_SLOT
 	xprt = xprt_alloc(args->net, sizeof(struct rpcrdma_xprt), 0,
 			  xprt_rdma_slot_table_entries);
+#else
+	xprt = xprt_alloc(args->net, sizeof(struct rpcrdma_xprt),
+			xprt_rdma_slot_table_entries,
+			xprt_rdma_slot_table_entries);
+#endif
 	if (!xprt) {
 		module_put(THIS_MODULE);
 		return ERR_PTR(-ENOMEM);
 	}
 
 	xprt->timeout = &xprt_rdma_default_timeout;
+#ifdef HAVE_XPRT_RECONNECT_DELAY
 	xprt->connect_timeout = xprt->timeout->to_initval;
 	xprt->max_reconnect_timeout = xprt->timeout->to_maxval;
+#endif
 	xprt->bind_timeout = RPCRDMA_BIND_TO;
 	xprt->reestablish_timeout = RPCRDMA_INIT_REEST_TO;
 	xprt->idle_timeout = RPCRDMA_IDLE_DISC_TO;
@@ -414,8 +437,10 @@ xprt_rdma_set_port(struct rpc_xprt *xprt
 	snprintf(buf, sizeof(buf), "%4hx", port);
 	xprt->address_strings[RPC_DISPLAY_HEX_PORT] = kstrdup(buf, GFP_KERNEL);
 
+#ifdef HAVE_TRACE_RPCRDMA_H
 	trace_xprtrdma_op_setport(container_of(xprt, struct rpcrdma_xprt,
 					       rx_xprt));
+#endif
 }
 
 /**
@@ -437,6 +462,7 @@ xprt_rdma_timer(struct rpc_xprt *xprt, s
 	xprt_force_disconnect(xprt);
 }
 
+#ifdef HAVE_XPRT_RECONNECT_DELAY
 /**
  * xprt_rdma_set_connect_timeout - set timeouts for establishing a connection
  * @xprt: controlling transport instance
@@ -450,7 +476,9 @@ static void xprt_rdma_set_connect_timeou
 {
 	struct rpcrdma_xprt *r_xprt = rpcx_to_rdmax(xprt);
 
+#ifdef HAVE_TRACE_RPCRDMA_H
 	trace_xprtrdma_op_set_cto(r_xprt, connect_timeout, reconnect_timeout);
+#endif
 
 	spin_lock(&xprt->transport_lock);
 
@@ -474,6 +502,7 @@ static void xprt_rdma_set_connect_timeou
 
 	spin_unlock(&xprt->transport_lock);
 }
+#endif
 
 /**
  * xprt_rdma_connect - schedule an attempt to reconnect
@@ -486,6 +515,7 @@ xprt_rdma_connect(struct rpc_xprt *xprt,
 {
 	struct rpcrdma_xprt *r_xprt = rpcx_to_rdmax(xprt);
 	struct rpcrdma_ep *ep = r_xprt->rx_ep;
+#ifdef HAVE_XPRT_RECONNECT_DELAY
 	unsigned long delay;
 
 	delay = 0;
@@ -493,11 +523,32 @@ xprt_rdma_connect(struct rpc_xprt *xprt,
 		delay = xprt_reconnect_delay(xprt);
 		xprt_reconnect_backoff(xprt, RPCRDMA_INIT_REEST_TO);
 	}
-	trace_xprtrdma_op_connect(r_xprt, delay);
+
 	queue_delayed_work(xprtiod_workqueue, &r_xprt->rx_connect_worker,
 			   delay);
+#else
+	if (ep && ep->re_connect_status != 0) {
+		/* Reconnect */
+		schedule_delayed_work(&r_xprt->rx_connect_worker,
+					xprt->reestablish_timeout);
+		xprt->reestablish_timeout <<= 1;
+		if (xprt->reestablish_timeout > RPCRDMA_MAX_REEST_TO)
+				xprt->reestablish_timeout = RPCRDMA_MAX_REEST_TO;
+		else if (xprt->reestablish_timeout < RPCRDMA_INIT_REEST_TO)
+				xprt->reestablish_timeout = RPCRDMA_INIT_REEST_TO;
+	} else {
+		schedule_delayed_work(&r_xprt->rx_connect_worker, 0);
+		if (!RPC_IS_ASYNC(task))
+				flush_delayed_work(&r_xprt->rx_connect_worker);
+	}
+#endif
+
+#if defined(HAVE_TRACE_RPCRDMA_H) && defined(HAVE_XPRT_RECONNECT_DELAY)
+	trace_xprtrdma_op_connect(r_xprt, delay);
+#endif
 }
 
+#ifdef HAVE_RPC_XPRT_OPS_FREE_SLOT
 /**
  * xprt_rdma_alloc_slot - allocate an rpc_rqst
  * @xprt: controlling RPC transport
@@ -543,6 +594,7 @@ xprt_rdma_free_slot(struct rpc_xprt *xpr
 	if (unlikely(!rpc_wake_up_next(&xprt->backlog)))
 		clear_bit(XPRT_CONGESTED, &xprt->state);
 }
+#endif
 
 static bool rpcrdma_check_regbuf(struct rpcrdma_xprt *r_xprt,
 				 struct rpcrdma_regbuf *rb, size_t size,
@@ -570,9 +622,19 @@ xprt_rdma_allocate(struct rpc_task *task
 {
 	struct rpc_rqst *rqst = task->tk_rqstp;
 	struct rpcrdma_xprt *r_xprt = rpcx_to_rdmax(rqst->rq_xprt);
+#ifdef HAVE_RPC_XPRT_OPS_FREE_SLOT
 	struct rpcrdma_req *req = rpcr_to_rdmar(rqst);
+#else
+	struct rpcrdma_req *req;
+#endif
 	gfp_t flags;
 
+#ifndef HAVE_RPC_XPRT_OPS_FREE_SLOT
+	req = rpcrdma_buffer_get(&r_xprt->rx_buf);
+	if (req == NULL)
+		goto out_get;
+#endif
+
 	flags = RPCRDMA_DEF_GFP;
 	if (RPC_IS_SWAPPER(task))
 		flags = __GFP_MEMALLOC | GFP_NOWAIT | __GFP_NOWARN;
@@ -584,13 +646,25 @@ xprt_rdma_allocate(struct rpc_task *task
 				  flags))
 		goto out_fail;
 
+#ifndef HAVE_RPC_XPRT_OPS_FREE_SLOT
+	rpcrdma_set_xprtdata(rqst, req);
+#endif
+
 	rqst->rq_buffer = rdmab_data(req->rl_sendbuf);
 	rqst->rq_rbuffer = rdmab_data(req->rl_recvbuf);
+#ifdef HAVE_TRACE_RPCRDMA_H
 	trace_xprtrdma_op_allocate(task, req);
+#endif
 	return 0;
 
 out_fail:
+#ifndef HAVE_RPC_XPRT_OPS_FREE_SLOT
+	rpcrdma_buffer_put(&r_xprt->rx_buf, req);
+out_get:
+#endif
+#ifdef HAVE_TRACE_RPCRDMA_H
 	trace_xprtrdma_op_allocate(task, NULL);
+#endif
 	return -ENOMEM;
 }
 
@@ -607,11 +681,20 @@ xprt_rdma_free(struct rpc_task *task)
 	struct rpcrdma_xprt *r_xprt = rpcx_to_rdmax(rqst->rq_xprt);
 	struct rpcrdma_req *req = rpcr_to_rdmar(rqst);
 
+#ifndef HAVE_XPRT_PIN_RQST
+	rpcrdma_remove_req(&r_xprt->rx_buf, req);
+#endif
+
+#ifdef HAVE_TRACE_RPCRDMA_H
 	trace_xprtrdma_op_free(task, req);
+#endif
 
 	if (!list_empty(&req->rl_registered))
 		frwr_unmap_sync(r_xprt, req);
 
+#ifndef HAVE_RPC_XPRT_OPS_FREE_SLOT
+	rpcrdma_buffer_put(&r_xprt->rx_buf, req);
+#endif
 	/* XXX: If the RPC is completing because of a signal and
 	 * not because a reply was received, we ought to ensure
 	 * that the Send completion has fired, so that memory
@@ -636,8 +719,14 @@ xprt_rdma_free(struct rpc_task *task)
  *		Do not try to send this message again.
  */
 static int
+#ifdef HAVE_XPRT_OPS_SEND_REQUEST_RQST_ARG
 xprt_rdma_send_request(struct rpc_rqst *rqst)
 {
+#else
+xprt_rdma_send_request(struct rpc_task *task)
+{
+	struct rpc_rqst *rqst = task->tk_rqstp;
+#endif
 	struct rpc_xprt *xprt = rqst->rq_xprt;
 	struct rpcrdma_req *req = rpcr_to_rdmar(rqst);
 	struct rpcrdma_xprt *r_xprt = rpcx_to_rdmax(xprt);
@@ -651,8 +740,10 @@ xprt_rdma_send_request(struct rpc_rqst *
 	if (!xprt_connected(xprt))
 		return -ENOTCONN;
 
+#ifdef HAVE_XPRT_REQUEST_GET_CONG
 	if (!xprt_request_get_cong(xprt, rqst))
 		return -EBADSLT;
+#endif
 
 	rc = rpcrdma_marshal_req(r_xprt, rqst);
 	if (rc < 0)
@@ -668,11 +759,13 @@ xprt_rdma_send_request(struct rpc_rqst *
 
 	rqst->rq_xmit_bytes_sent += rqst->rq_snd_buf.len;
 
+#ifdef HAVE_RPC_REPLY_EXPECTED
 	/* An RPC with no reply will throw off credit accounting,
 	 * so drop the connection to reset the credit grant.
 	 */
 	if (!rpc_reply_expected(rqst->rq_task))
 		goto drop_connection;
+#endif
 	return 0;
 
 failed_marshal:
@@ -738,14 +831,26 @@ xprt_rdma_disable_swap(struct rpc_xprt *
 /*
  * Plumbing for rpc transport switch and kernel module
  */
-
+#ifdef HAVE_RPC_XPRT_OPS_CONST
 static const struct rpc_xprt_ops xprt_rdma_procs = {
+#else
+static struct rpc_xprt_ops xprt_rdma_procs = {
+#endif
 	.reserve_xprt		= xprt_reserve_xprt_cong,
 	.release_xprt		= xprt_release_xprt_cong, /* sunrpc/xprt.c */
+#ifdef HAVE_RPC_XPRT_OPS_FREE_SLOT
 	.alloc_slot		= xprt_rdma_alloc_slot,
 	.free_slot		= xprt_rdma_free_slot,
+#else
+	.alloc_slot		= xprt_alloc_slot,
+#endif
 	.release_request	= xprt_release_rqst_cong,       /* ditto */
+#ifdef HAVE_RPC_XPRT_OPS_SET_RETRANS_TIMEOUT
+	.set_retrans_timeout	= xprt_set_retrans_timeout_def, /* ditto */
+#endif
+#ifdef HAVE_RPC_XPRT_OPS_WAIT_FOR_REPLY_REQUEST
 	.wait_for_reply_request	= xprt_wait_for_reply_request_def, /* ditto */
+#endif
 	.timer			= xprt_rdma_timer,
 	.rpcbind		= rpcb_getport_async,	/* sunrpc/rpcb_clnt.c */
 	.set_port		= xprt_rdma_set_port,
@@ -755,15 +860,22 @@ static const struct rpc_xprt_ops xprt_rd
 	.send_request		= xprt_rdma_send_request,
 	.close			= xprt_rdma_close,
 	.destroy		= xprt_rdma_destroy,
+#ifdef HAVE_XPRT_RECONNECT_DELAY
 	.set_connect_timeout	= xprt_rdma_set_connect_timeout,
+#endif
 	.print_stats		= xprt_rdma_print_stats,
 	.enable_swap		= xprt_rdma_enable_swap,
 	.disable_swap		= xprt_rdma_disable_swap,
 	.inject_disconnect	= xprt_rdma_inject_disconnect,
 #if defined(CONFIG_SUNRPC_BACKCHANNEL)
 	.bc_setup		= xprt_rdma_bc_setup,
+#ifdef HAVE_RPC_XPRT_OPS_BC_UP
+	.bc_up			= xprt_rdma_bc_up,
+#endif
 	.bc_maxpayload		= xprt_rdma_bc_maxpayload,
+#ifdef HAVE_RPC_XPRT_OPS_BC_NUM_SLOTS
 	.bc_num_slots		= xprt_rdma_bc_max_slots,
+#endif
 	.bc_free_rqst		= xprt_rdma_bc_free_rqst,
 	.bc_destroy		= xprt_rdma_bc_destroy,
 #endif
@@ -775,6 +887,9 @@ static struct xprt_class xprt_rdma = {
 	.owner			= THIS_MODULE,
 	.ident			= XPRT_TRANSPORT_RDMA,
 	.setup			= xprt_setup_rdma,
+#ifdef HAVE_XPRT_CLASS_NETID
+	.netid          = { "rdma", "rdma6", "" },
+#endif
 };
 
 void xprt_rdma_cleanup(void)
