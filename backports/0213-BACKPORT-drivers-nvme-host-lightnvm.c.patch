From: Israel Rukshin <israelr@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/nvme/host/lightnvm.c

Change-Id: I17d9422f71ffadaeda8a3303420acef48dde9851
---
 drivers/nvme/host/lightnvm.c | 63 ++++++++++++++++++++++++++++++++----
 1 file changed, 57 insertions(+), 6 deletions(-)

--- a/drivers/nvme/host/lightnvm.c
+++ b/drivers/nvme/host/lightnvm.c
@@ -12,8 +12,10 @@
 #include <linux/bitops.h>
 #include <linux/lightnvm.h>
 #include <linux/vmalloc.h>
+#ifdef HAVE_NVM_USER_VIO
 #include <linux/sched/sysctl.h>
 #include <uapi/linux/lightnvm.h>
+#endif
 
 enum nvme_nvm_admin_opcode {
 	nvme_nvm_admin_identity		= 0xe2,
@@ -659,8 +661,25 @@ static struct request *nvme_nvm_alloc_re
 
 	rq->cmd_flags &= ~REQ_FAILFAST_DRIVER;
 
-	if (rqd->bio)
+	if (rqd->bio) {
+#ifdef HAVE_BLK_RQ_APPEND_BIO_POINTER
+		blk_rq_append_bio(rq, rqd->bio);
+#else
+#ifdef HAVE_BLK_RQ_APPEND_BIO
 		blk_rq_append_bio(rq, &rqd->bio);
+#else
+#ifdef HAVE_BLK_INIT_REQUEST_FROM_BIO
+		blk_init_request_from_bio(rq, rqd->bio);
+#else
+		rq->ioprio = bio_prio(rqd->bio);
+		rq->__data_len = rqd->bio->bi_iter.bi_size;
+		rq->bio = rq->biotail = rqd->bio;
+		if (bio_has_data(rqd->bio))
+			rq->nr_phys_segments = bio_phys_segments(q, rqd->bio);
+#endif /* HAVE_BLK_INIT_REQUEST_FROM_BIO */
+#endif /* HAVE_BLK_RQ_APPEND_BIO */
+#endif /* HAVE_BLK_RQ_APPEND_BIO_POINTER */
+	}
 	else
 		rq->ioprio = IOPRIO_PRIO_VALUE(IOPRIO_CLASS_BE, IOPRIO_NORM);
 
@@ -692,13 +711,13 @@ static int nvme_nvm_submit_io(struct nvm
 		if (ret)
 			goto err_free_cmd;
 	}
-
 	rq->end_io_data = rqd;
-
+#ifdef HAVE_BLK_EXECUTE_RQ_NOWAIT_5_PARAM
 	blk_execute_rq_nowait(q, NULL, rq, 0, nvme_nvm_end_io);
-
+#else
+	blk_execute_rq_nowait(NULL, rq, 0, nvme_nvm_end_io);
+#endif
 	return 0;
-
 err_free_cmd:
 	kfree(cmd);
 	return ret;
@@ -747,6 +766,7 @@ static struct nvm_dev_ops nvme_nvm_dev_o
 	.dev_dma_free		= nvme_nvm_dev_dma_free,
 };
 
+#ifdef HAVE_NVM_USER_VIO
 static int nvme_nvm_submit_user_cmd(struct request_queue *q,
 				struct nvme_ns *ns,
 				struct nvme_nvm_command *vcmd,
@@ -757,7 +777,9 @@ static int nvme_nvm_submit_user_cmd(stru
 {
 	bool write = nvme_is_write((struct nvme_command *)vcmd);
 	struct nvm_dev *dev = ns->ndev;
+#ifndef HAVE_ENUM_BIO_REMAPPED
 	struct gendisk *disk = ns->disk;
+#endif
 	struct request *rq;
 	struct bio *bio = NULL;
 	__le64 *ppa_list = NULL;
@@ -817,11 +839,30 @@ static int nvme_nvm_submit_user_cmd(stru
 			vcmd->ph_rw.metadata = cpu_to_le64(metadata_dma);
 		}
 
+#ifdef HAVE_BIO_BI_DISK
 		bio->bi_disk = disk;
+#elif defined HAVE_ENUM_BIO_REMAPPED
+		bio_set_dev(bio, ns->disk->part0);
+#else
+		if (!disk)
+			goto submit;
+
+		bio->bi_bdev = bdget_disk(disk, 0);
+		if (!bio->bi_bdev) {
+			ret = -ENODEV;
+			goto err_meta;
+		}
+#endif
 	}
 
+#if !defined HAVE_BIO_BI_DISK && !defined HAVE_ENUM_BIO_REMAPPED
+submit:
+#endif
+#ifdef HAVE_BLK_EXECUTE_RQ_4_PARAM
 	blk_execute_rq(q, NULL, rq, 0);
-
+#else
+	blk_execute_rq(NULL, rq, 0);
+#endif
 	if (nvme_req(rq)->flags & NVME_REQ_CANCELLED)
 		ret = -EINTR;
 	else if (nvme_req(rq)->status & 0x7ff)
@@ -839,8 +880,16 @@ err_meta:
 	if (meta_buf && meta_len)
 		dma_pool_free(dev->dma_pool, metadata, metadata_dma);
 err_map:
+#if defined HAVE_BIO_BI_DISK || defined HAVE_ENUM_BIO_REMAPPED
 	if (bio)
 		blk_rq_unmap_user(bio);
+#else
+	if (bio) {
+		if (disk && bio->bi_bdev)
+			bdput(bio->bi_bdev);
+		blk_rq_unmap_user(bio);
+	}
+#endif
 err_ppa:
 	if (ppa_buf && ppa_len)
 		dma_pool_free(dev->dma_pool, ppa_list, ppa_dma);
@@ -944,6 +993,7 @@ int nvme_nvm_ioctl(struct nvme_ns *ns, u
 		return -ENOTTY;
 	}
 }
+#endif /* HAVE_NVM_USER_VIO */
 
 int nvme_nvm_register(struct nvme_ns *ns, char *disk_name, int node)
 {
@@ -1273,3 +1323,4 @@ const struct attribute_group nvme_nvm_at
 	.attrs		= nvm_dev_attrs,
 	.is_visible	= nvm_dev_attrs_visible,
 };
+
