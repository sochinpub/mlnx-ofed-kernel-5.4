From: Valentine Fatiev <valentinef@mellanox.com>
Subject: [PATCH] BACKPORT:
 drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c

Change-Id: Ibc8fb8d510703dfe3c8b269fdb211d65aa92a93b
---
 .../ethernet/mellanox/mlx5/core/ipoib/ipoib.c | 82 +++++++++++++++++--
 1 file changed, 77 insertions(+), 5 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
@@ -46,11 +46,22 @@ static const struct mlx5e_profile *mlx5_
 static const struct net_device_ops mlx5i_netdev_ops = {
 	.ndo_open                = mlx5i_open,
 	.ndo_stop                = mlx5i_close,
-	.ndo_get_stats64         = mlx5i_get_stats,
-	.ndo_init                = mlx5i_dev_init,
-	.ndo_uninit              = mlx5i_dev_cleanup,
-	.ndo_change_mtu          = mlx5i_change_mtu,
-	.ndo_do_ioctl            = mlx5i_ioctl,
+#if defined(HAVE_NDO_GET_STATS64) || defined(HAVE_NDO_GET_STATS64_RET_VOID)
+       .ndo_get_stats64         = mlx5i_get_stats,
+#else
+	.ndo_get_stats           = mlx5i_get_stats,
+#endif
+       .ndo_init                = mlx5i_dev_init,
+       .ndo_uninit              = mlx5i_dev_cleanup,
+#ifndef HAVE_NDO_CHANGE_MTU_EXTENDED
+       .ndo_change_mtu          = mlx5i_change_mtu,
+#else
+	.extended.ndo_change_mtu          = mlx5i_change_mtu,
+#endif
+       .ndo_do_ioctl            = mlx5i_ioctl,
+#ifdef HAVE_NET_DEVICE_OPS_EXTENDED
+	.ndo_size = sizeof(struct net_device_ops),
+#endif
 };
 
 /* IPoIB mlx5 netdev profile */
@@ -68,15 +79,37 @@ static void mlx5i_build_nic_params(struc
 		MLX5I_PARAMS_DEFAULT_LOG_RQ_SIZE;
 
 	params->lro_en = false;
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	params->lro_en = true;
+	MLX5E_SET_PFLAG(params, MLX5E_PFLAG_HWLRO, false);
+#else
+	params->lro_en = false;
+#endif
 	params->hard_mtu = MLX5_IB_GRH_BYTES + MLX5_IPOIB_HARD_LEN;
 	params->tunneled_offload_en = false;
 }
 
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+void set_lro_features_bit(struct mlx5e_priv *priv)
+{
+	u64 hw_support_lro = 0;
+	hw_support_lro = priv->netdev->hw_features & NETIF_F_RXCSUM;
+	if (hw_support_lro) {
+		priv->netdev->features |= NETIF_F_LRO;
+		priv->netdev->hw_features |= NETIF_F_LRO;
+		priv->netdev->wanted_features |= NETIF_F_LRO;
+	}
+}
+#endif
+
 /* Called directly after IPoIB netdevice was created to initialize SW structs */
 int mlx5i_init(struct mlx5_core_dev *mdev, struct net_device *netdev)
 {
 	struct mlx5e_priv *priv  = mlx5i_epriv(netdev);
 	int err;
+#ifndef HAVE_NET_DEVICE_MIN_MAX_MTU
+	u16 max_mtu;
+#endif
 
 	err = mlx5e_netdev_init(netdev, priv->profile, priv, mdev);
 	if (err)
@@ -84,7 +117,12 @@ int mlx5i_init(struct mlx5_core_dev *mde
 
 	netif_carrier_off(netdev);
 	mlx5e_set_netdev_mtu_boundaries(priv);
+#ifdef HAVE_NET_DEVICE_MIN_MAX_MTU
 	netdev->mtu = netdev->max_mtu;
+#else
+	mlx5_query_port_max_mtu(mdev, &max_mtu, 1);
+	netdev->mtu = max_mtu;
+#endif
 
 	mlx5e_build_nic_params(priv, NULL, netdev->mtu);
 	mlx5i_build_nic_params(mdev, &priv->channels.params);
@@ -100,6 +138,9 @@ int mlx5i_init(struct mlx5_core_dev *mde
 	netdev->hw_features    |= NETIF_F_TSO6;
 	netdev->hw_features    |= NETIF_F_RXCSUM;
 	netdev->hw_features    |= NETIF_F_RXHASH;
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	set_lro_features_bit(priv);
+#endif
 
 	netdev->netdev_ops = &mlx5i_netdev_ops;
 	netdev->ethtool_ops = &mlx5i_ethtool_ops;
@@ -140,10 +181,20 @@ static void mlx5i_grp_sw_update_stats(st
 	memcpy(&priv->stats.sw, &s, sizeof(s));
 }
 
+#ifdef HAVE_NDO_GET_STATS64_RET_VOID
 void mlx5i_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
+#elif defined(HAVE_NDO_GET_STATS64)
+struct rtnl_link_stats64 * mlx5i_get_stats(struct net_device *dev,
+					   struct rtnl_link_stats64 *stats)
+#else
+struct net_device_stats * mlx5i_get_stats(struct net_device *dev)
+#endif
 {
 	struct mlx5e_priv     *priv   = mlx5i_epriv(dev);
 	struct mlx5e_sw_stats *sstats = &priv->stats.sw;
+#if !defined(HAVE_NDO_GET_STATS64) && !defined(HAVE_NDO_GET_STATS64_RET_VOID)
+	struct net_device_stats *stats = &priv->netdev_stats;
+#endif
 
 	mlx5i_grp_sw_update_stats(priv);
 
@@ -152,6 +203,10 @@ void mlx5i_get_stats(struct net_device *
 	stats->tx_packets = sstats->tx_packets;
 	stats->tx_bytes   = sstats->tx_bytes;
 	stats->tx_dropped = sstats->tx_queue_dropped;
+
+#ifndef HAVE_NDO_GET_STATS64_RET_VOID
+	return stats;
+#endif
 }
 
 int mlx5i_init_underlay_qp(struct mlx5e_priv *priv)
@@ -331,7 +386,9 @@ static int mlx5i_create_flow_steering(st
 	if (err) {
 		netdev_err(priv->netdev, "Failed to create arfs tables, err=%d\n",
 			   err);
+#ifdef CONFIG_RFS_ACCEL
 		priv->netdev->hw_features &= ~NETIF_F_NTUPLE;
+#endif
 	}
 
 	err = mlx5e_create_ttc_table(priv);
@@ -518,9 +575,13 @@ int mlx5i_ioctl(struct net_device *dev,
 
 	switch (cmd) {
 	case SIOCSHWTSTAMP:
+#ifdef HAVE_SIOCGHWTSTAMP
 		return mlx5e_hwstamp_set(priv, ifr);
 	case SIOCGHWTSTAMP:
 		return mlx5e_hwstamp_get(priv, ifr);
+#else
+		return mlx5e_hwstamp_ioctl(priv, ifr);
+#endif
 	default:
 		return -EOPNOTSUPP;
 	}
@@ -659,7 +720,13 @@ static int mlx5i_xmit(struct net_device
 	struct mlx5_ib_ah *mah   = to_mah(address);
 	struct mlx5i_priv *ipriv = epriv->ppriv;
 
+#ifdef HAVE_NETDEV_XMIT_MORE
 	mlx5i_sq_xmit(sq, skb, &mah->av, dqpn, ipriv->qkey, netdev_xmit_more());
+#elif defined(HAVE_SK_BUFF_XMIT_MORE)
+	mlx5i_sq_xmit(sq, skb, &mah->av, dqpn, ipriv->qkey, skb->xmit_more);
+#else
+	mlx5i_sq_xmit(sq, skb, &mah->av, dqpn, ipriv->qkey);
+#endif
 
 	return NETDEV_TX_OK;
 }
@@ -756,8 +823,10 @@ static int mlx5_rdma_setup_rn(struct ib_
 	rn->detach_mcast = mlx5i_detach_mcast;
 	rn->set_id = mlx5i_set_pkey_index;
 
+#ifdef HAVE_NET_DEVICE_NEEDS_FREE_NETDEV
 	netdev->priv_destructor = mlx5_rdma_netdev_free;
 	netdev->needs_free_netdev = 1;
+#endif
 
 	return 0;
 
@@ -791,6 +860,9 @@ int mlx5_rdma_rn_get_params(struct mlx5_
 		.rxqs = nch,
 		.param = mdev,
 		.initialize_rdma_netdev = mlx5_rdma_setup_rn,
+#ifndef HAVE_NET_DEVICE_NEEDS_FREE_NETDEV
+		.uninitialize_rdma_netdev = mlx5_rdma_netdev_free,
+#endif
 	};
 
 	return 0;
