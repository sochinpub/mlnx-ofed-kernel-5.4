From: Mikhael Goikhman <migo@nvidia.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/devlink.c

Change-Id: I6e985e4a13ec98460311f8995927232f7d1171f4
---
 .../net/ethernet/mellanox/mlx5/core/devlink.c | 353 ++++++++++++++++--
 1 file changed, 312 insertions(+), 41 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
@@ -4,6 +4,9 @@
 #include <devlink.h>
 
 #include "mlx5_core.h"
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+#include "fw_reset.h"
+#endif
 #include "fs_core.h"
 #include "eswitch.h"
 #include "mlx5_devm.h"
@@ -11,19 +14,47 @@
 #include "sf/sf.h"
 #include "en/tc_ct.h"
 
+#ifdef HAVE_DEVLINK_DRIVERINIT_VAL
+static unsigned int esw_offloads_num_big_groups = ESW_OFFLOADS_DEFAULT_NUM_GROUPS;
+#else
+unsigned int esw_offloads_num_big_groups = ESW_OFFLOADS_DEFAULT_NUM_GROUPS;
+#endif
+module_param_named(num_of_groups, esw_offloads_num_big_groups,
+                   uint, 0644);
+MODULE_PARM_DESC(num_of_groups,
+                 "Eswitch offloads number of big groups in FDB table. Valid range 1 - 1024. Default 15");
+
+#ifdef HAVE_DEVLINK_HAS_FLASH_UPDATE
 static int mlx5_devlink_flash_update(struct devlink *devlink,
+#ifdef HAVE_FLASH_UPDATE_GET_3_PARAMS
+				     struct devlink_flash_update_params *params,
+#else
 				     const char *file_name,
 				     const char *component,
+#endif
 				     struct netlink_ext_ack *extack)
 {
 	struct mlx5_core_dev *dev = devlink_priv(devlink);
+
+#ifdef HAVE_DEVLINK_FLASH_UPDATE_PARAMS_HAS_STRUCT_FW
+	return mlx5_firmware_flash(dev, params->fw, extack);
+#else
 	const struct firmware *fw;
 	int err;
-
+#ifdef HAVE_FLASH_UPDATE_GET_3_PARAMS
+	if (params->component)
+#else
 	if (component)
+#endif
 		return -EOPNOTSUPP;
 
-	err = request_firmware_direct(&fw, file_name, &dev->pdev->dev);
+	err = request_firmware_direct(&fw,
+#ifdef HAVE_FLASH_UPDATE_GET_3_PARAMS
+			params->file_name,
+#else
+			file_name,
+#endif
+			&dev->pdev->dev);
 	if (err)
 		return err;
 
@@ -31,8 +62,171 @@ static int mlx5_devlink_flash_update(str
 	release_firmware(fw);
 
 	return err;
+#endif /* HAVE_DEVLINK_FLASH_UPDATE_PARAMS_HAS_STRUCT_FW */
+}
+#endif /* HAVE_DEVLINK_HAS_FLASH_UPDATE */
+
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+static int mlx5_devlink_reload_fw_activate(struct devlink *devlink, struct netlink_ext_ack *extack)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+	u8 reset_level, reset_type, net_port_alive;
+	int err;
+
+	err = mlx5_fw_reset_query(dev, &reset_level, &reset_type);
+	if (err)
+		return err;
+	if (!(reset_level & MLX5_MFRL_REG_RESET_LEVEL3)) {
+		NL_SET_ERR_MSG_MOD(extack, "FW activate requires reboot");
+		return -EINVAL;
+	}
+
+	net_port_alive = !!(reset_type & MLX5_MFRL_REG_RESET_TYPE_NET_PORT_ALIVE);
+	err = mlx5_fw_reset_set_reset_sync(dev, net_port_alive);
+	if (err)
+		goto out;
+
+	err = mlx5_fw_reset_wait_reset_done(dev);
+out:
+	if (err)
+		NL_SET_ERR_MSG_MOD(extack, "FW activate command failed");
+	return err;
+}
+#endif
+
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+static int mlx5_devlink_trigger_fw_live_patch(struct devlink *devlink,
+		struct netlink_ext_ack *extack)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+	u8 reset_level;
+	int err;
+
+	err = mlx5_fw_reset_query(dev, &reset_level, NULL);
+	if (err)
+		return err;
+	if (!(reset_level & MLX5_MFRL_REG_RESET_LEVEL0)) {
+		NL_SET_ERR_MSG_MOD(extack,
+				"FW upgrade to the stored FW can't be done by FW live patching");
+		return -EINVAL;
+	}
+
+	return mlx5_fw_reset_set_live_patch(dev);
+}
+#endif
+
+#if defined(HAVE_DEVLINK_HAS_RELOAD) || defined(HAVE_DEVLINK_HAS_RELOAD_UP_DOWN)
+static int load_one_and_check(struct mlx5_core_dev *dev,
+			      struct netlink_ext_ack *extack)
+{
+	int err;
+
+	err = mlx5_load_one(dev, false);
+	if (err == -EUSERS)
+		NL_SET_ERR_MSG_MOD(extack, "IRQs for requested CPU affinity are not available");
+	return err;
 }
 
+#endif
+
+#ifdef HAVE_DEVLINK_HAS_RELOAD
+static int mlx5_devlink_reload(struct devlink *devlink,
+			       struct netlink_ext_ack *extack)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+
+	mlx5_unload_one(dev, false);
+	return load_one_and_check(dev, extack);
+}
+#endif
+
+#ifdef HAVE_DEVLINK_HAS_RELOAD_UP_DOWN
+static int mlx5_devlink_reload_down(struct devlink *devlink,
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+			     bool netns_change,
+			     enum devlink_reload_action action,
+			     enum devlink_reload_limit limit,
+#elif defined(HAVE_DEVLINK_RELOAD_DOWN_HAS_3_PARAMS)
+			     bool netns_change,
+#endif
+			     struct netlink_ext_ack *extack)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+	bool sf_dev_allocated;
+#ifdef CONFIG_MLX5_ESWITCH
+	u16 mode = 0;
+
+	if (!mlx5_devlink_eswitch_mode_get(devlink, &mode)) {
+		if (mode == DEVLINK_ESWITCH_MODE_SWITCHDEV) {
+			NL_SET_ERR_MSG_MOD(extack, "Reload not supported in switchdev mode");
+			return -EOPNOTSUPP;
+		}
+	}
+#endif
+	sf_dev_allocated = mlx5_sf_dev_allocated(dev);
+	if (sf_dev_allocated) {
+		/* Reload results in deleting SF device which further results in
+		 * unregistering devlink instance while holding devlink_mutext.
+		 * Hence, do not support reload.
+		 */
+		NL_SET_ERR_MSG_MOD(extack, "reload is unsupported when SFs are allocated\n");
+		return -EOPNOTSUPP;
+	}
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+	switch (action) {
+		case DEVLINK_RELOAD_ACTION_DRIVER_REINIT:
+			mlx5_unload_one(dev, false);
+			return 0;
+		case DEVLINK_RELOAD_ACTION_FW_ACTIVATE:
+			if (limit == DEVLINK_RELOAD_LIMIT_NO_RESET)
+				return mlx5_devlink_trigger_fw_live_patch(devlink, extack);
+			return mlx5_devlink_reload_fw_activate(devlink, extack);
+		default:
+			/* Unsupported action should not get to this function */
+			WARN_ON(1);
+			return -EOPNOTSUPP;
+	}
+#else
+	mlx5_unload_one(dev, false);
+	return 0;
+#endif /* HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION */
+}
+
+static int mlx5_devlink_reload_up(struct devlink *devlink,
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+		enum devlink_reload_action action,
+		enum devlink_reload_limit limit,
+		u32 *actions_performed,
+#endif
+		struct netlink_ext_ack *extack)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+	*actions_performed = BIT(action);
+	switch (action) {
+		case DEVLINK_RELOAD_ACTION_DRIVER_REINIT:
+			return load_one_and_check(dev, extack);
+		case DEVLINK_RELOAD_ACTION_FW_ACTIVATE:
+			if (limit == DEVLINK_RELOAD_LIMIT_NO_RESET)
+				break;
+			/* On fw_activate action, also driver is reloaded and reinit performed */
+			*actions_performed |= BIT(DEVLINK_RELOAD_ACTION_DRIVER_REINIT);
+			return load_one_and_check(dev, extack);
+		default:
+			/* Unsupported action should not get to this function */
+			WARN_ON(1);
+			return -EOPNOTSUPP;
+	}
+
+	return 0;
+#else
+	return load_one_and_check(dev, extack);
+#endif /* HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION */
+}
+
+#endif /* HAVE_DEVLINK_HAS_RELOAD_UP_DOWN */
+
+#if defined(HAVE_DEVLINK_HAS_INFO_GET) && defined(HAVE_DEVLINK_INFO_VERSION_FIXED_PUT)
 static u8 mlx5_fw_ver_major(u32 version)
 {
 	return (version >> 24) & 0xff;
@@ -49,7 +243,6 @@ static u16 mlx5_fw_ver_subminor(u32 vers
 }
 
 #define DEVLINK_FW_STRING_LEN 32
-
 static int
 mlx5_devlink_info_get(struct devlink *devlink, struct devlink_info_req *req,
 		      struct netlink_ext_ack *extack)
@@ -91,45 +284,9 @@ mlx5_devlink_info_get(struct devlink *de
 
 	return 0;
 }
-
-static int mlx5_devlink_reload_down(struct devlink *devlink, bool netns_change,
-				    struct netlink_ext_ack *extack)
-{
-	struct mlx5_core_dev *dev = devlink_priv(devlink);
-	bool sf_dev_allocated;
-#ifdef CONFIG_MLX5_ESWITCH
-	u16 mode = 0;
-
-	if (!mlx5_devlink_eswitch_mode_get(devlink, &mode)) {
-		if (mode == DEVLINK_ESWITCH_MODE_SWITCHDEV) {
-			NL_SET_ERR_MSG_MOD(extack, "Reload not supported in switchdev mode");
-			return -EOPNOTSUPP;
-		}
-	}
 #endif
 
-	sf_dev_allocated = mlx5_sf_dev_allocated(dev);
-	if (sf_dev_allocated) {
-		/* Reload results in deleting SF device which further results in
-		 * unregistering devlink instance while holding devlink_mutext.
-		 * Hence, do not support reload.
-		 */
-		NL_SET_ERR_MSG_MOD(extack, "reload is unsupported when SFs are allocated\n");
-		return -EOPNOTSUPP;
-	}
-
-	mlx5_unload_one(dev, false);
-	return 0;
-}
-
-static int mlx5_devlink_reload_up(struct devlink *devlink,
-				  struct netlink_ext_ack *extack)
-{
-	struct mlx5_core_dev *dev = devlink_priv(devlink);
-
-	return mlx5_load_one(dev, false);
-}
-
+#ifdef HAVE_DEVLINK_TRAP_SUPPORT
 static struct mlx5_devlink_trap *mlx5_find_trap_by_id(struct mlx5_core_dev *dev, int trap_id)
 {
 	struct mlx5_devlink_trap *dl_trap;
@@ -182,8 +339,12 @@ static void mlx5_devlink_trap_fini(struc
 
 static int mlx5_devlink_trap_action_set(struct devlink *devlink,
 					const struct devlink_trap *trap,
+#ifdef HAVE_DEVLINK_TRAP_ACTION_SET_4_ARGS
 					enum devlink_trap_action action,
 					struct netlink_ext_ack *extack)
+#else
+					enum devlink_trap_action action)
+#endif
 {
 	struct mlx5_core_dev *dev = devlink_priv(devlink);
 	enum devlink_trap_action action_orig;
@@ -191,7 +352,9 @@ static int mlx5_devlink_trap_action_set(
 	int err = 0;
 
 	if (is_mdev_switchdev_mode(dev)) {
+#ifdef HAVE_DEVLINK_TRAP_ACTION_SET_4_ARGS
 		NL_SET_ERR_MSG_MOD(extack, "Devlink traps can't be set in switchdev mode");
+#endif
 		return -EOPNOTSUPP;
 	}
 
@@ -219,18 +382,27 @@ static int mlx5_devlink_trap_action_set(
 out:
 	return err;
 }
+#endif /* HAVE_DEVLINK_TRAP_SUPPORT */
 
 static const struct devlink_ops mlx5_devlink_ops = {
 #ifdef CONFIG_MLX5_ESWITCH
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_MODE_GET_SET
 	.eswitch_mode_set = mlx5_devlink_eswitch_mode_set,
 	.eswitch_mode_get = mlx5_devlink_eswitch_mode_get,
+#endif /* HAVE_DEVLINK_HAS_ESWITCH_MODE_GET_SET */
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_INLINE_MODE_GET_SET
 	.eswitch_inline_mode_set = mlx5_devlink_eswitch_inline_mode_set,
 	.eswitch_inline_mode_get = mlx5_devlink_eswitch_inline_mode_get,
+#endif /* HAVE_DEVLINK_HAS_ESWITCH_INLINE_MODE_GET_SET */
+#ifdef HAVE_DEVLINK_HAS_ESWITCH_ENCAP_MODE_SET
 	.eswitch_encap_mode_set = mlx5_devlink_eswitch_encap_mode_set,
 	.eswitch_encap_mode_get = mlx5_devlink_eswitch_encap_mode_get,
+#endif /* HAVE_DEVLINK_HAS_ESWITCH_ENCAP_MODE_SET */
+#ifdef HAVE_DEVLINK_HAS_PORT_FUNCTION_HW_ADDR_GET
 	.port_function_hw_addr_get = mlx5_devlink_port_function_hw_addr_get,
 	.port_function_hw_addr_set = mlx5_devlink_port_function_hw_addr_set,
 #endif
+#endif /* CONFIG_MLX5_ESWITCH */
 
 /* HAVE_DEVLINK_PORT_ATTRS_PCI_SF_SET condition should be moved to backports in next rebase
    as a result of CONFIG_MLX5_SF_MANAGER is set  we need to block it
@@ -244,15 +416,32 @@ static const struct devlink_ops mlx5_dev
 	.port_fn_state_set = mlx5_devlink_sf_port_fn_state_set,
 #endif
 #endif
+#ifdef HAVE_DEVLINK_HAS_FLASH_UPDATE
 	.flash_update = mlx5_devlink_flash_update,
+#endif /* HAVE_DEVLINK_HAS_FLASH_UPDATE */
+#if defined(HAVE_DEVLINK_HAS_INFO_GET) && defined(HAVE_DEVLINK_INFO_VERSION_FIXED_PUT)
 	.info_get = mlx5_devlink_info_get,
+#endif /* HAVE_DEVLINK_HAS_INFO_GET && HAVE_DEVLINK_INFO_VERSION_FIXED_PUT */
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+	.reload_actions = BIT(DEVLINK_RELOAD_ACTION_DRIVER_REINIT) |
+		       	  BIT(DEVLINK_RELOAD_ACTION_FW_ACTIVATE),
+	.reload_limits = BIT(DEVLINK_RELOAD_LIMIT_NO_RESET),
+#endif
+#ifdef HAVE_DEVLINK_HAS_RELOAD_UP_DOWN
 	.reload_down = mlx5_devlink_reload_down,
 	.reload_up = mlx5_devlink_reload_up,
+#endif /* HAVE_DEVLINK_HAS_RELOAD_UP_DOWN */
+#ifdef HAVE_DEVLINK_HAS_RELOAD
+	.reload = mlx5_devlink_reload,
+#endif
+#ifdef HAVE_DEVLINK_TRAP_SUPPORT
 	.trap_init = mlx5_devlink_trap_init,
 	.trap_fini = mlx5_devlink_trap_fini,
 	.trap_action_set = mlx5_devlink_trap_action_set,
+#endif /* HAVE_DEVLINK_TRAP_SUPPORT */
 };
 
+#ifdef HAVE_DEVLINK_TRAP_SUPPORT
 void mlx5_devlink_trap_report(struct mlx5_core_dev *dev, int trap_id, struct sk_buff *skb,
 			      struct devlink_port *dl_port)
 {
@@ -270,7 +459,11 @@ void mlx5_devlink_trap_report(struct mlx
 			      dl_trap->trap.action);
 		return;
 	}
+#ifdef HAVE_DEVLINK_TRAP_REPORT_5_ARGS
 	devlink_trap_report(devlink, skb, dl_trap->item, dl_port, NULL);
+#else
+	devlink_trap_report(devlink, skb, dl_trap->item, dl_port);
+#endif
 }
 
 int mlx5_devlink_trap_get_num_active(struct mlx5_core_dev *dev)
@@ -300,6 +493,7 @@ int mlx5_devlink_traps_get_action(struct
 	*action = dl_trap->trap.action;
 	return 0;
 }
+#endif /* HAVE_DEVLINK_TRAP_SUPPORT */
 
 struct devlink *mlx5_devlink_alloc(void)
 {
@@ -311,6 +505,8 @@ void mlx5_devlink_free(struct devlink *d
 	devlink_free(devlink);
 }
 
+
+#if defined(HAVE_DEVLINK_PARAM) && defined(HAVE_DEVLINK_PARAMS_PUBLISHED)
 static int mlx5_devlink_fs_mode_validate(struct devlink *devlink, u32 id,
 					 union devlink_param_value val,
 					 struct netlink_ext_ack *extack)
@@ -375,6 +571,7 @@ static int mlx5_devlink_fs_mode_get(stru
 	return 0;
 }
 
+#ifdef HAVE_DEVLINK_PARAM_GENERIC_ID_ENABLE_ROCE
 static int mlx5_devlink_enable_roce_validate(struct devlink *devlink, u32 id,
 					     union devlink_param_value val,
 					     struct netlink_ext_ack *extack)
@@ -389,6 +586,7 @@ static int mlx5_devlink_enable_roce_vali
 
 	return 0;
 }
+#endif
 
 #ifdef CONFIG_MLX5_ESWITCH
 static int mlx5_devlink_large_group_num_validate(struct devlink *devlink, u32 id,
@@ -535,6 +733,26 @@ static int mlx5_devlink_esw_port_metadat
 	return 0;
 }
 
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+static int mlx5_devlink_enable_remote_dev_reset_set(struct devlink *devlink, u32 id,
+		struct devlink_param_gset_ctx *ctx)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+
+	mlx5_fw_reset_enable_remote_dev_reset_set(dev, ctx->val.vbool);
+	return 0;
+}
+
+static int mlx5_devlink_enable_remote_dev_reset_get(struct devlink *devlink, u32 id,
+		struct devlink_param_gset_ctx *ctx)
+{
+	struct mlx5_core_dev *dev = devlink_priv(devlink);
+
+	ctx->val.vbool = mlx5_fw_reset_enable_remote_dev_reset_get(dev);
+	return 0;
+}
+#endif
+
 static const struct devlink_param mlx5_devlink_params[] = {
 	DEVLINK_PARAM_DRIVER(MLX5_DEVLINK_PARAM_ID_CT_ACTION_ON_NAT_CONNS,
 			     "ct_action_on_nat_conns", DEVLINK_PARAM_TYPE_BOOL,
@@ -547,8 +765,15 @@ static const struct devlink_param mlx5_d
 			     BIT(DEVLINK_PARAM_CMODE_RUNTIME),
 			     mlx5_devlink_fs_mode_get, mlx5_devlink_fs_mode_set,
 			     mlx5_devlink_fs_mode_validate),
+#ifdef HAVE_DEVLINK_PARAM_GENERIC_ID_ENABLE_ROCE
 	DEVLINK_PARAM_GENERIC(ENABLE_ROCE, BIT(DEVLINK_PARAM_CMODE_DRIVERINIT),
 			      NULL, NULL, mlx5_devlink_enable_roce_validate),
+#endif
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+	DEVLINK_PARAM_GENERIC(ENABLE_REMOTE_DEV_RESET, BIT(DEVLINK_PARAM_CMODE_RUNTIME),
+			mlx5_devlink_enable_remote_dev_reset_get,
+			mlx5_devlink_enable_remote_dev_reset_set, NULL),
+#endif
 	DEVLINK_PARAM_DRIVER(MLX5_DEVLINK_PARAM_ID_CT_MAX_OFFLOADED_CONNS,
 			     "ct_max_offloaded_conns", DEVLINK_PARAM_TYPE_U32,
 			     BIT(DEVLINK_PARAM_CMODE_RUNTIME),
@@ -596,13 +821,15 @@ static void mlx5_devlink_set_params_init
 					   MLX5_DEVLINK_PARAM_ID_FLOW_STEERING_MODE,
 					   value);
 
+#ifdef HAVE_DEVLINK_PARAM_GENERIC_ID_ENABLE_ROCE
 	value.vbool = MLX5_CAP_GEN(dev, roce);
 	devlink_param_driverinit_value_set(devlink,
 					   DEVLINK_PARAM_GENERIC_ID_ENABLE_ROCE,
 					   value);
+#endif
 
 #ifdef CONFIG_MLX5_ESWITCH
-	value.vu32 = ESW_OFFLOADS_DEFAULT_NUM_GROUPS;
+	value.vu32 = esw_offloads_num_big_groups;
 	devlink_param_driverinit_value_set(devlink,
 					   MLX5_DEVLINK_PARAM_ID_ESW_LARGE_GROUP_NUM,
 					   value);
@@ -632,18 +859,34 @@ static void mlx5_devlink_set_params_init
 	}
 #endif
 }
+#endif /* HAVE_DEVLINK_HAS_INFO_GET && HAVE_DEVLINK_INFO_VERSION_FIXED_PUT */
 
+#ifdef HAVE_DEVLINK_TRAP_SUPPORT
+#ifdef HAVE_DEVLINK_TRAP_GROUPS_REGISTER
 #define MLX5_TRAP_DROP(_id, _group_id)					\
 	DEVLINK_TRAP_GENERIC(DROP, DROP, _id,				\
 			     DEVLINK_TRAP_GROUP_GENERIC_ID_##_group_id, \
 			     DEVLINK_TRAP_METADATA_TYPE_F_IN_PORT)
+#else
+#define MLX5_TRAP_DROP(_id, group)					\
+	DEVLINK_TRAP_GENERIC(DROP, DROP, _id,				\
+			     DEVLINK_TRAP_GROUP_GENERIC(group),         \
+			     DEVLINK_TRAP_METADATA_TYPE_F_IN_PORT)
+#endif
 
 static const struct devlink_trap mlx5_traps_arr[] = {
 	MLX5_TRAP_DROP(INGRESS_VLAN_FILTER, L2_DROPS),
+#ifdef HAVE_DEVLINK_TRAP_DMAC_FILTER
+	MLX5_TRAP_DROP(DMAC_FILTER, L2_DROPS),
+#endif
 };
 
 static const struct devlink_trap_group mlx5_trap_groups_arr[] = {
+#ifdef HAVE_DEVLINK_TRAP_GROUP_GENERIC_2_ARGS
 	DEVLINK_TRAP_GROUP_GENERIC(L2_DROPS, 0),
+#else
+	DEVLINK_TRAP_GROUP_GENERIC(L2_DROPS),
+#endif
 };
 
 static int mlx5_devlink_traps_register(struct devlink *devlink)
@@ -651,13 +894,16 @@ static int mlx5_devlink_traps_register(s
 	struct mlx5_core_dev *core_dev = devlink_priv(devlink);
 	int err;
 
+#ifdef HAVE_DEVLINK_TRAP_GROUPS_REGISTER
 	err = devlink_trap_groups_register(devlink, mlx5_trap_groups_arr,
 					   ARRAY_SIZE(mlx5_trap_groups_arr));
 	if (err)
 		return err;
+#endif
 
 	err = devlink_traps_register(devlink, mlx5_traps_arr, ARRAY_SIZE(mlx5_traps_arr),
 				     &core_dev->priv);
+#ifdef HAVE_DEVLINK_TRAP_GROUPS_REGISTER
 	if (err)
 		goto err_trap_group;
 	return 0;
@@ -665,50 +911,75 @@ static int mlx5_devlink_traps_register(s
 err_trap_group:
 	devlink_trap_groups_unregister(devlink, mlx5_trap_groups_arr,
 				       ARRAY_SIZE(mlx5_trap_groups_arr));
+#endif
 	return err;
 }
 
 static void mlx5_devlink_traps_unregister(struct devlink *devlink)
 {
 	devlink_traps_unregister(devlink, mlx5_traps_arr, ARRAY_SIZE(mlx5_traps_arr));
+#ifdef HAVE_DEVLINK_TRAP_GROUPS_REGISTER
 	devlink_trap_groups_unregister(devlink, mlx5_trap_groups_arr,
 				       ARRAY_SIZE(mlx5_trap_groups_arr));
+#endif
 }
+#endif /* HAVE_DEVLINK_TRAP_SUPPORT */
 
 int mlx5_devlink_register(struct devlink *devlink, struct device *dev)
 {
+#if (!defined(HAVE_DEVLINK_PARAM) || !defined(HAVE_DEVLINK_PARAMS_PUBLISHED)) && defined(CONFIG_MLX5_ESWITCH)
+	struct mlx5_core_dev *priv_dev;
+	struct mlx5_eswitch *eswitch;
+#endif
 	int err;
 
 	err = devlink_register(devlink, dev);
 	if (err)
 		return err;
 
+#if defined(HAVE_DEVLINK_PARAM) && defined(HAVE_DEVLINK_PARAMS_PUBLISHED)
 	err = devlink_params_register(devlink, mlx5_devlink_params,
 				      ARRAY_SIZE(mlx5_devlink_params));
 	if (err)
 		goto params_reg_err;
 	mlx5_devlink_set_params_init_values(devlink);
+#ifdef HAVE_DEVLINK_PARAMS_PUBLISHED
 	devlink_params_publish(devlink);
+#endif /* HAVE_DEVLINK_PARAMS_PUBLISHED */
 
+#ifdef HAVE_DEVLINK_TRAP_SUPPORT
 	err = mlx5_devlink_traps_register(devlink);
 	if (err)
 		goto traps_reg_err;
+#endif /* HAVE_DEVLINK_TRAP_SUPPORT */
 
 	return 0;
 
+#ifdef HAVE_DEVLINK_TRAP_SUPPORT
 traps_reg_err:
 	devlink_params_unregister(devlink, mlx5_devlink_params,
 				  ARRAY_SIZE(mlx5_devlink_params));
+#endif /* HAVE_DEVLINK_TRAP_SUPPORT */
 params_reg_err:
 	devlink_unregister(devlink);
+#elif defined(CONFIG_MLX5_ESWITCH)
+	priv_dev = devlink_priv(devlink);
+	eswitch = priv_dev->priv.eswitch;
+	if (eswitch && mlx5_esw_vport_match_metadata_supported(eswitch))
+		eswitch->flags |= MLX5_ESWITCH_VPORT_MATCH_METADATA;
+#endif
 	return err;
 }
 
 void mlx5_devlink_unregister(struct devlink *devlink)
 {
+#if defined(HAVE_DEVLINK_PARAM) && defined(HAVE_DEVLINK_PARAMS_PUBLISHED)
+#ifdef HAVE_DEVLINK_TRAP_SUPPORT
 	mlx5_devlink_traps_unregister(devlink);
+#endif /* HAVE_DEVLINK_TRAP_SUPPORT */
 	devlink_params_unregister(devlink, mlx5_devlink_params,
 				  ARRAY_SIZE(mlx5_devlink_params));
+#endif
 	devlink_unregister(devlink);
 }
 
