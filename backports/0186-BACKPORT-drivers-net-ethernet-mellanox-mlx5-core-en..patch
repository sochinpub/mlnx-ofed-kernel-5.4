From: Mikhael Goikhman <migo@nvidia.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/en.h

Change-Id: I1cd3269855ed4ead02199c2350aeea633277dd61
---
 drivers/net/ethernet/mellanox/mlx5/core/en.h | 227 ++++++++++++++++++-
 1 file changed, 216 insertions(+), 11 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -32,11 +32,17 @@
 #ifndef __MLX5_EN_H__
 #define __MLX5_EN_H__
 
+#ifdef HAVE_XDP_BUFF
+#include <linux/bpf.h>
+#endif
 #include <linux/if_vlan.h>
 #include <linux/etherdevice.h>
 #include <linux/timecounter.h>
+#include <linux/clocksource.h>
 #include <linux/net_tstamp.h>
+#if defined(HAVE_NDO_SET_TX_MAXRATE) || defined(HAVE_NDO_SET_TX_MAXRATE_EXTENDED)
 #include <linux/hashtable.h>
+#endif
 #include <linux/crash_dump.h>
 #include <linux/mlx5/driver.h>
 #include <linux/mlx5/qp.h>
@@ -46,11 +52,16 @@
 #include <linux/mlx5/transobj.h>
 #include <linux/mlx5/fs.h>
 #include <linux/rhashtable.h>
+#include <linux/ethtool.h>
+#ifdef HAVE_UDP_TUNNEL_NIC_INFO
 #include <net/udp_tunnel.h>
+#endif
 #include <net/switchdev.h>
 #include <net/xdp.h>
 #include <linux/dim.h>
+#ifdef HAVE_BITS_H
 #include <linux/bits.h>
+#endif
 #include "wq.h"
 #include "mlx5_core.h"
 #include "en_stats.h"
@@ -58,9 +69,21 @@
 #include "en/fs.h"
 #include "lib/hv_vhca.h"
 #include "lib/clock.h"
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+#include <linux/inet_lro.h>
+#else
+#include <net/ip.h>
+#endif
 
+#ifndef HAVE_DEVLINK_HEALTH_REPORT_SUPPORT
+/* The intention is to pass NULL for backports of old kernels */
+struct devlink_health_reporter {};
+#endif /* HAVE_DEVLINK_HEALTH_REPORT_SUPPORT */
+ 
 extern const struct net_device_ops mlx5e_netdev_ops;
+#ifdef HAVE_NET_PAGE_POOL_H
 struct page_pool;
+#endif
 
 #define MLX5E_METADATA_ETHER_TYPE (0x8CE4)
 #define MLX5E_METADATA_ETHER_LEN 8
@@ -239,10 +262,16 @@ enum mlx5e_priv_flag {
 	MLX5E_PFLAG_TX_CQE_COMPRESS,
 	MLX5E_PFLAG_RX_STRIDING_RQ,
 	MLX5E_PFLAG_RX_NO_CSUM_COMPLETE,
+#ifdef HAVE_XDP_BUFF
 	MLX5E_PFLAG_XDP_TX_MPWQE,
+#endif
 	MLX5E_PFLAG_SKB_TX_MPWQE,
 	MLX5E_PFLAG_DROPLESS_RQ,
 	MLX5E_PFLAG_PER_CH_STATS,
+	/* OFED-specific private flags */
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	MLX5E_PFLAG_HWLRO,
+#endif
 	MLX5E_PFLAG_TX_XDP_CSUM,
 	MLX5E_PFLAG_SKB_XMIT_MORE,
 	MLX5E_PFLAG_TX_PORT_TS,
@@ -281,7 +310,9 @@ struct mlx5e_params {
 	bool tx_dim_enabled;
 	u32 lro_timeout;
 	u32 pflags;
+#ifdef HAVE_XDP_BUFF
 	struct bpf_prog *xdp_prog;
+#endif
 	struct mlx5e_xsk *xsk;
 	unsigned int sw_mtu;
 	int hard_mtu;
@@ -312,6 +343,9 @@ struct mlx5e_cq {
 	struct napi_struct        *napi;
 	struct mlx5_core_cq        mcq;
 	struct mlx5e_ch_stats     *ch_stats;
+#ifndef HAVE_NAPI_STATE_MISSED
+	unsigned long             *ch_flags;
+#endif
 
 	/* control */
 	struct net_device         *netdev;
@@ -352,6 +386,9 @@ enum {
 	MLX5E_SQ_STATE_PENDING_XSK_TX,
 	MLX5E_SQ_STATE_SKB_XMIT_MORE,
 	MLX5E_SQ_STATE_TX_XDP_CSUM,
+#ifdef HAVE_XDP_REDIRECT
+	MLX5E_SQ_STATE_REDIRECT,
+#endif
 };
 
 struct mlx5e_tx_mpwqe {
@@ -364,12 +401,14 @@ struct mlx5e_tx_mpwqe {
 };
 
 #ifdef CONFIG_MLX5_EN_SPECIAL_SQ
+#if defined(HAVE_NDO_SET_TX_MAXRATE) || defined(HAVE_NDO_SET_TX_MAXRATE_EXTENDED)
 struct mlx5e_sq_flow_map {
 	struct hlist_node hlist;
 	u32               dst_ip;
 	u16               dst_port;
 	u16               queue_index;
 };
+#endif /* HAVE_NDO_SET_TX_MAXRATE || HAVE_NDO_SET_TX_MAXRATE_EXTENDED */
 #endif
 
 struct mlx5e_dim {
@@ -435,7 +474,7 @@ struct mlx5e_txqsq {
 	int                        txq_ix;
 	u32                        rate_limit;
 	struct work_struct         recover_work;
-#ifdef CONFIG_MLX5_EN_SPECIAL_SQ
+#if defined(CONFIG_MLX5_EN_SPECIAL_SQ) && (defined(HAVE_NDO_SET_TX_MAXRATE) || defined(HAVE_NDO_SET_TX_MAXRATE_EXTENDED))
 	struct mlx5e_sq_flow_map   flow_map;
 #endif
 	struct mlx5e_ptpsq        *ptpsq;
@@ -447,13 +486,21 @@ struct mlx5e_dma_info {
 	u32 refcnt_bias;
 	union {
 		struct page *page;
+#ifdef HAVE_XSK_BUFF_ALLOC
 		struct xdp_buff *xsk;
+#else
+		struct {
+			u64 handle;
+			void *data;
+		} xsk;
+#endif
 	};
 };
 
 /* XDP packets can be transmitted in different ways. On completion, we need to
  * distinguish between them to clean up things in a proper way.
  */
+#ifdef HAVE_XDP_BUFF
 enum mlx5e_xdp_xmit_mode {
 	/* An xdp_frame was transmitted due to either XDP_REDIRECT from another
 	 * device or XDP_TX from an XSK RQ. The frame has to be unmapped and
@@ -467,7 +514,7 @@ enum mlx5e_xdp_xmit_mode {
 	MLX5E_XDP_XMIT_MODE_PAGE,
 
 	/* No xdp_frame was created at all, the transmit happened from a UMEM
-	 * page. The UMEM Completion Ring producer pointer has to be increased.
+ * page. The UMEM Completion Ring producer pointer has to be increased.
 	 */
 	MLX5E_XDP_XMIT_MODE_XSK,
 };
@@ -485,6 +532,7 @@ struct mlx5e_xdp_info {
 		} page;
 	};
 };
+#endif /* HAVE_XDP_BUFF */
 
 struct mlx5e_xmit_data {
 	dma_addr_t  dma_addr;
@@ -492,6 +540,7 @@ struct mlx5e_xmit_data {
 	u32         len;
 };
 
+#ifdef HAVE_XDP_BUFF
 struct mlx5e_xdp_info_fifo {
 	struct mlx5e_xdp_info *xi;
 	u32 *cc;
@@ -543,6 +592,7 @@ struct mlx5e_xdpsq {
 	struct mlx5_wq_ctrl        wq_ctrl;
 	struct mlx5e_channel      *channel;
 } ____cacheline_aligned_in_smp;
+#endif /* #ifdef HAVE_XDP_BUFF */
 
 struct mlx5e_icosq {
 	/* data path */
@@ -584,9 +634,25 @@ struct mlx5e_umr_dma_info {
 struct mlx5e_mpw_info {
 	struct mlx5e_umr_dma_info umr;
 	u16 consumed_strides;
+#ifdef HAVE_XDP_BUFF
 	DECLARE_BITMAP(xdp_xmit_bitmap, MLX5_MPWRQ_PAGES_PER_WQE);
+#endif
 };
 
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+#define IS_HW_LRO(params) \
+	((params)->lro_en && MLX5E_GET_PFLAG(params, MLX5E_PFLAG_HWLRO))
+#define IS_SW_LRO(params) \
+	((params)->lro_en && !MLX5E_GET_PFLAG(params, MLX5E_PFLAG_HWLRO))
+
+/* SW LRO defines for MLX5 */
+#define MLX5E_LRO_MAX_DESC	32
+struct mlx5e_sw_lro {
+	struct net_lro_mgr	lro_mgr;
+	struct net_lro_desc	lro_desc[MLX5E_LRO_MAX_DESC];
+};
+#endif
+
 #define MLX5E_MAX_RX_FRAGS 4
 
 #define MLX5E_PAGE_CACHE_LOG_MAX_RQ_MULT	4
@@ -678,6 +744,11 @@ struct mlx5e_rq {
 		} mpwqe;
 	};
 	struct {
+#ifdef HAVE_XSK_SUPPORT
+#ifndef HAVE_XSK_BUFF_ALLOC
+		u16            umem_headroom;
+#endif
+#endif
 		u16            headroom;
 		u32            frame0_sz;
 		u8             map_dir;   /* dma map direction */
@@ -707,12 +778,25 @@ struct mlx5e_rq {
 	struct mlx5e_dim       dim_obj; /* Adaptive Moderation */
 
 	/* XDP */
+#ifdef HAVE_XDP_BUFF
 	struct bpf_prog __rcu *xdp_prog;
 	struct mlx5e_xdpsq    *xdpsq;
+#endif
 	DECLARE_BITMAP(flags, 8);
+#ifdef HAVE_NET_PAGE_POOL_H
 	struct page_pool      *page_pool;
+#endif
+
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	struct mlx5e_sw_lro   *sw_lro;
+#endif
 
 	/* AF_XDP zero-copy */
+#ifdef HAVE_XSK_SUPPORT
+#ifndef HAVE_XSK_BUFF_ALLOC
+	struct zero_copy_allocator zca;
+#endif
+#endif
 	struct xdp_umem       *umem;
 
 	struct work_struct     recover_work;
@@ -727,10 +811,18 @@ struct mlx5e_rq {
 	struct mlx5e_dma_info  wqe_overflow;
 
 	/* XDP read-mostly */
+#ifdef HAVE_NET_XDP_H
 	struct xdp_rxq_info    xdp_rxq;
+#endif
 	cqe_ts_to_ns           ptp_cyc2time;
 } ____cacheline_aligned_in_smp;
 
+#ifndef HAVE_NAPI_STATE_MISSED
+enum channel_flags {
+	MLX5E_CHANNEL_NAPI_SCHED = 1,
+};
+#endif
+
 enum mlx5e_channel_state {
 	MLX5E_CHANNEL_STATE_XSK,
 	MLX5E_CHANNEL_NUM_STATES
@@ -739,32 +831,45 @@ enum mlx5e_channel_state {
 struct mlx5e_channel {
 	/* data path */
 	struct mlx5e_rq            rq;
+#ifdef HAVE_XDP_BUFF
 	struct mlx5e_xdpsq         rq_xdpsq;
+#endif
 	struct mlx5e_txqsq         sq[MLX5E_MAX_NUM_TC];
 #ifdef CONFIG_MLX5_EN_SPECIAL_SQ
 	struct mlx5e_txqsq         *special_sq;
 	u16			   num_special_sq;
 #endif
 	struct mlx5e_icosq         icosq;   /* internal control operations */
+#ifdef HAVE_XDP_BUFF
 	bool                       xdp;
+#endif
 	struct napi_struct         napi;
 	struct device             *pdev;
 	struct net_device         *netdev;
 	__be32                     mkey_be;
 	u8                         num_tc;
 	u8                         lag_port;
+#ifndef HAVE_NAPI_STATE_MISSED
+	unsigned long              flags;
+#endif
 
+#ifdef HAVE_XDP_REDIRECT
 	/* XDP_REDIRECT */
 	struct mlx5e_xdpsq         xdpsq;
+#endif
 
+#ifdef HAVE_XSK_SUPPORT
 	/* AF_XDP zero-copy */
 	struct mlx5e_rq            xskrq;
 	struct mlx5e_xdpsq         xsksq;
+#endif
 
+#if defined HAVE_XSK_SUPPORT || defined HAVE_KTLS_RX_SUPPORT
 	/* Async ICOSQ */
 	struct mlx5e_icosq         async_icosq;
 	/* async_icosq can be accessed from any CPU - the spinlock protects it. */
 	spinlock_t                 async_icosq_lock;
+#endif
 
 	/* data path - accessed per napi poll */
 	const struct cpumask	  *aff_mask;
@@ -795,9 +900,13 @@ struct mlx5e_channel_stats {
 	struct mlx5e_sq_stats sq[MLX5E_MAX_NUM_TC];
 	struct mlx5e_rq_stats rq;
 	struct mlx5e_rq_stats xskrq;
+#ifdef HAVE_XDP_BUFF
 	struct mlx5e_xdpsq_stats rq_xdpsq;
+#ifdef HAVE_XDP_REDIRECT
 	struct mlx5e_xdpsq_stats xdpsq;
 	struct mlx5e_xdpsq_stats xsksq;
+#endif
+#endif
 } ____cacheline_aligned_in_smp;
 
 struct mlx5e_port_ptp_stats {
@@ -893,7 +1002,7 @@ struct mlx5e_priv {
 	/* priv data path fields - start */
 	struct mlx5e_select_queue_params __rcu *selq;
 	struct mlx5e_txqsq **txq2sq;
-#ifdef CONFIG_MLX5_EN_SPECIAL_SQ
+#if defined(CONFIG_MLX5_EN_SPECIAL_SQ) && (defined(HAVE_NDO_SET_TX_MAXRATE) || defined(HAVE_NDO_SET_TX_MAXRATE_EXTENDED))
 	DECLARE_HASHTABLE(flow_map_hash, ilog2(MLX5E_MAX_RL_QUEUES));
 #endif
 #ifdef CONFIG_MLX5_CORE_EN_DCB
@@ -934,7 +1043,13 @@ struct mlx5e_priv {
 	struct mlx5e_channel_stats trap_stats;
 	struct mlx5e_port_ptp_stats port_ptp_stats;
 	u16                        max_nch;
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	struct mlx5e_sw_lro        sw_lro[MLX5E_MAX_NUM_CHANNELS];
+#endif
 	u8                         max_opened_tc;
+#if !defined(HAVE_NDO_GET_STATS64) && !defined(HAVE_NDO_GET_STATS64_RET_VOID)
+	struct net_device_stats    netdev_stats;
+#endif
 	u8                         port_ptp_opened:1;
 	u8                         shared_rq:1;
 #ifdef CONFIG_MLX5_EN_SPECIAL_SQ
@@ -947,7 +1062,9 @@ struct mlx5e_priv {
 	struct notifier_block      events_nb;
 	struct notifier_block      blocking_events_nb;
 
+#ifdef HAVE_UDP_TUNNEL_NIC_INFO
 	struct udp_tunnel_nic_info nic_info;
+#endif
 #ifdef CONFIG_MLX5_CORE_EN_DCB
 	struct mlx5e_dcbx          dcbx;
 #endif
@@ -1006,7 +1123,9 @@ struct mlx5e_profile {
 void mlx5e_create_debugfs(struct mlx5e_priv *priv);
 void mlx5e_destroy_debugfs(struct mlx5e_priv *priv);
 
+#ifdef __ETHTOOL_DECLARE_LINK_MODE_MASK
 void mlx5e_build_ptys2ethtool_map(void);
+#endif
 
 bool mlx5e_check_fragmented_striding_rq_cap(struct mlx5_core_dev *mdev);
 bool mlx5e_striding_rq_possible(struct mlx5_core_dev *mdev,
@@ -1015,15 +1134,26 @@ bool mlx5e_striding_rq_possible(struct m
 int mlx5e_sysfs_create(struct net_device *dev);
 void mlx5e_sysfs_remove(struct net_device *dev);
 
-#ifdef CONFIG_MLX5_EN_SPECIAL_SQ
+#if defined(CONFIG_MLX5_EN_SPECIAL_SQ) && (defined(HAVE_NDO_SET_TX_MAXRATE) || defined(HAVE_NDO_SET_TX_MAXRATE_EXTENDED))
 int mlx5e_rl_init_sysfs(struct net_device *netdev, struct mlx5e_params params);
 void mlx5e_rl_remove_sysfs(struct mlx5e_priv *priv);
 #endif
 
+#if defined(HAVE_NDO_SETUP_TC_TAKES_TC_SETUP_TYPE) || defined(HAVE_NDO_SETUP_TC_RH_EXTENDED)
 int mlx5e_setup_tc_mqprio(struct mlx5e_priv *priv,
 			  struct tc_mqprio_qopt *mqprio);
+#else
+int mlx5e_setup_tc(struct net_device *netdev, u8 tc);
+#endif
 
+#ifdef HAVE_NDO_GET_STATS64_RET_VOID
 void mlx5e_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats);
+#elif defined(HAVE_NDO_GET_STATS64)
+struct rtnl_link_stats64 * mlx5e_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats);
+#else
+struct net_device_stats * mlx5e_get_stats(struct net_device *dev);
+#endif
+
 void mlx5e_fold_sw_stats64(struct mlx5e_priv *priv, struct rtnl_link_stats64 *s);
 
 void mlx5e_init_l2_addr(struct mlx5e_priv *priv);
@@ -1032,8 +1162,12 @@ void mlx5e_self_test(struct net_device *
 		     u64 *buf);
 void mlx5e_set_rx_mode_work(struct work_struct *work);
 
+#ifdef HAVE_SIOCGHWTSTAMP
 int mlx5e_hwstamp_set(struct mlx5e_priv *priv, struct ifreq *ifr);
 int mlx5e_hwstamp_get(struct mlx5e_priv *priv, struct ifreq *ifr);
+#else
+int mlx5e_hwstamp_ioctl(struct mlx5e_priv *priv, struct ifreq *ifr);
+#endif
 int mlx5e_modify_rx_cqe_compression_locked(struct mlx5e_priv *priv, bool val);
 int mlx5e_modify_tx_cqe_compression_locked(struct mlx5e_priv *priv, bool val);
 
@@ -1071,6 +1205,9 @@ struct mlx5e_create_cq_param {
 	struct mlx5e_ch_stats *ch_stats;
 	int node;
 	int ix;
+#ifndef HAVE_NAPI_STATE_MISSED
+	unsigned long             *ch_flags;
+#endif
 };
 
 int mlx5e_wait_for_min_rx_wqes(struct mlx5e_rq *rq, int wait_time);
@@ -1087,12 +1224,19 @@ struct mlx5e_sq_param;
 int mlx5e_open_icosq(struct mlx5e_channel *c, struct mlx5e_params *params,
 		     struct mlx5e_sq_param *param, struct mlx5e_icosq *sq);
 void mlx5e_close_icosq(struct mlx5e_icosq *sq);
+#ifdef HAVE_XDP_BUFF
+void mlx5e_close_xdpsq(struct mlx5e_xdpsq *sq);
 int mlx5e_open_xdpsq(struct mlx5e_channel *c, struct mlx5e_params *params,
-		     struct mlx5e_sq_param *param, struct xdp_umem *umem,
-		     struct mlx5e_xdpsq *sq, bool is_redirect);
+                     struct mlx5e_sq_param *param, struct xdp_umem *umem,
+#ifdef HAVE_XDP_REDIRECT
+                            struct mlx5e_xdpsq *sq,
+                            bool is_redirect);
+#else
+                            struct mlx5e_xdpsq *sq);
+#endif
 void mlx5e_activate_xdpsq(struct mlx5e_xdpsq *sq);
 void mlx5e_deactivate_xdpsq(struct mlx5e_xdpsq *sq);
-void mlx5e_close_xdpsq(struct mlx5e_xdpsq *sq);
+#endif
 
 struct mlx5e_cq_param;
 int mlx5e_open_cq(struct mlx5e_priv *priv, struct dim_cq_moder moder,
@@ -1183,6 +1327,8 @@ void mlx5e_destroy_mdev_resources(struct
 int mlx5e_refresh_tirs(struct mlx5e_priv *priv, bool enable_uc_lb,
 		       bool enable_mc_lb);
 int mlx5e_modify_tirs_lro(struct mlx5e_priv *priv);
+int mlx5e_modify_tirs_lro_ctx(struct mlx5e_priv *priv, void *context);
+int mlx5e_update_lro(struct net_device *netdev, bool enable);
 void mlx5e_mkey_set_relaxed_ordering(struct mlx5_core_dev *mdev, void *mkc);
 
 /* common netdev helpers */
@@ -1223,8 +1369,9 @@ int mlx5e_set_dev_port_mtu(struct mlx5e_
 int mlx5e_set_dev_port_mtu_ctx(struct mlx5e_priv *priv, void *context);
 int mlx5e_change_mtu(struct net_device *netdev, int new_mtu,
 		     mlx5e_fp_preactivate preactivate);
+#ifdef HAVE_UDP_TUNNEL_NIC_INFO
 void mlx5e_vxlan_set_netdev_info(struct mlx5e_priv *priv);
-
+#endif
 /* ethtool helpers */
 void mlx5e_ethtool_get_drvinfo(struct mlx5e_priv *priv,
 			       struct ethtool_drvinfo *drvinfo);
@@ -1245,22 +1392,55 @@ int mlx5e_ethtool_get_coalesce(struct ml
 			       struct ethtool_coalesce *coal);
 int mlx5e_ethtool_set_coalesce(struct mlx5e_priv *priv,
 			       struct ethtool_coalesce *coal);
+#ifdef HAVE_GET_SET_LINK_KSETTINGS
 int mlx5e_ethtool_get_link_ksettings(struct mlx5e_priv *priv,
 				     struct ethtool_link_ksettings *link_ksettings);
 int mlx5e_ethtool_set_link_ksettings(struct mlx5e_priv *priv,
 				     const struct ethtool_link_ksettings *link_ksettings);
-int mlx5e_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc);
-int mlx5e_set_rxfh(struct net_device *dev, const u32 *indir, const u8 *key,
-		   const u8 hfunc);
+#endif
+#ifdef HAVE_ETHTOOL_GET_SET_SETTINGS
+int mlx5e_get_settings(struct net_device *netdev, struct ethtool_cmd *cmd);
+int mlx5e_set_settings(struct net_device *netdev, struct ethtool_cmd *cmd);
+#endif
+#ifdef HAVE_GET_SET_RXFH
+#ifdef HAVE_ETH_SS_RSS_HASH_FUNCS
+int mlx5e_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key,
+                         u8 *hfunc);
+#else
+int mlx5e_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key);
+#endif
+#elif defined(HAVE_GET_SET_RXFH_INDIR)
+int mlx5e_get_rxfh_indir(struct net_device *netdev, u32 *indir);
+#endif
+
+#ifdef HAVE_GET_SET_RXFH
+int mlx5e_set_rxfh(struct net_device *dev, const u32 *indir,
+#ifdef HAVE_ETH_SS_RSS_HASH_FUNCS
+                  const u8 *key, const u8 hfunc);
+#else
+                  const u8 *key);
+#endif
+#elif defined(HAVE_GET_SET_RXFH_INDIR)
+int mlx5e_set_rxfh_indir(struct net_device *dev, const u32 *indir);
+#endif
+
 int mlx5e_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *info,
 		    u32 *rule_locs);
 int mlx5e_set_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd);
+#ifdef HAVE_GET_SET_RXFH
 u32 mlx5e_ethtool_get_rxfh_key_size(struct mlx5e_priv *priv);
+#endif
 u32 mlx5e_ethtool_get_rxfh_indir_size(struct mlx5e_priv *priv);
 int mlx5e_ethtool_get_ts_info(struct mlx5e_priv *priv,
 			      struct ethtool_ts_info *info);
 int mlx5e_ethtool_flash_device(struct mlx5e_priv *priv,
 			       struct ethtool_flash *flash);
+#ifdef HAVE_TC_SETUP_CB_EGDEV_REGISTER
+#ifndef HAVE_TC_BLOCK_OFFLOAD
+int mlx5e_setup_tc(struct net_device *dev, enum tc_setup_type type,
+		   void *type_data);
+#endif
+#endif
 void mlx5e_ethtool_get_pauseparam(struct mlx5e_priv *priv,
 				  struct ethtool_pauseparam *pauseparam);
 int mlx5e_ethtool_set_pauseparam(struct mlx5e_priv *priv,
@@ -1311,19 +1491,44 @@ void mlx5e_rx_free_page_cache(struct mlx
 void mlx5e_rx_dim_work(struct work_struct *work);
 void mlx5e_tx_dim_work(struct work_struct *work);
 
+#ifdef HAVE_GET_SET_LINK_KSETTINGS
 int mlx5e_get_link_ksettings(struct net_device *netdev,
 			     struct ethtool_link_ksettings *link_ksettings);
 int mlx5e_set_link_ksettings(struct net_device *netdev,
 			     const struct ethtool_link_ksettings *link_ksettings);
+#endif
+
+#if defined(HAVE_NDO_UDP_TUNNEL_ADD) || defined(HAVE_NDO_UDP_TUNNEL_ADD_EXTENDED)
+void mlx5e_add_vxlan_port(struct net_device *netdev, struct udp_tunnel_info *ti);
+void mlx5e_del_vxlan_port(struct net_device *netdev, struct udp_tunnel_info *ti);
+#elif defined(HAVE_NDO_ADD_VXLAN_PORT)
+void mlx5e_add_vxlan_port(struct net_device *netdev, sa_family_t sa_family, __be16 port);
+void mlx5e_del_vxlan_port(struct net_device *netdev, sa_family_t sa_family, __be16 port);
+#endif
+
 netdev_features_t mlx5e_features_check(struct sk_buff *skb,
 				       struct net_device *netdev,
 				       netdev_features_t features);
+
+#ifdef HAVE_NETDEV_FEATURES_T
+netdev_features_t mlx5e_features_check(struct sk_buff *skb, struct net_device *netdev,
+ 				       netdev_features_t features);
+#elif defined(HAVE_KERNEL_WITH_VXLAN_SUPPORT_ON) && defined(HAVE_VXLAN_GSO_CHECK)
+bool mlx5e_gso_check(struct sk_buff *skb, struct net_device *netdev);
+#endif
+
 int mlx5e_set_features(struct net_device *netdev, netdev_features_t features);
 #ifdef CONFIG_MLX5_ESWITCH
 int mlx5e_set_vf_mac(struct net_device *dev, int vf, u8 *mac);
+#ifdef HAVE_VF_TX_RATE_LIMITS
 int mlx5e_set_vf_rate(struct net_device *dev, int vf, int min_tx_rate, int max_tx_rate);
+#else
+int mlx5e_set_vf_rate(struct net_device *dev, int vf, int max_tx_rate);
+#endif
+#ifdef HAVE_NDO_GET_VF_STATS
 int mlx5e_get_vf_config(struct net_device *dev, int vf, struct ifla_vf_info *ivi);
 int mlx5e_get_vf_stats(struct net_device *dev, int vf, struct ifla_vf_stats *vf_stats);
+#endif
 bool mlx5e_is_rep_shared_rq(const struct mlx5e_priv *priv);
 #endif
 
