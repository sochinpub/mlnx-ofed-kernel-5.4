From: Shay Drory <shayd@nvidia.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/main.c

Change-Id: I6c68222a90422f14ba577dd872ade7f7dd9e25fd
---
 drivers/net/ethernet/mellanox/mlx5/core/main.c | 31 +++++++++++++++++++++++++-
 1 file changed, 30 insertions(+), 1 deletion(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@ -79,8 +79,10 @@
 #include "sf/sf.h"
 #include "mlx5_devm.h"
 #ifdef CONFIG_PPC
+#ifdef HAVE_PNV_PCI_AS_NOTIFY
 #include <asm/pnv-pci.h>
 #endif
+#endif
 #include "diag/diag_cnt.h"
 #include "mlx5_irq.h"
 
@@ -290,9 +292,11 @@ static struct mlx5_profile profile[] = {
 #define FW_INIT_WARN_MESSAGE_INTERVAL	20000
 
 #ifdef CONFIG_PPC
+#ifdef HAVE_PNV_PCI_AS_NOTIFY
 static void mlx5_as_notify_init(struct mlx5_core_dev *dev);
 static void mlx5_as_notify_cleanup(struct mlx5_core_dev *dev);
 #endif
+#endif
 
 static int fw_initializing(struct mlx5_core_dev *dev)
 {
@@ -963,8 +967,10 @@ static ssize_t mlx5_roce_enable_set_enab
 {
 	struct pci_dev *pdev = container_of(device, struct pci_dev, dev);
 	struct mlx5_core_dev *dev = pci_get_drvdata(pdev);
+#if defined(HAVE_DEVLINK_PARAM) && defined(HAVE_DEVLINK_PARAM_GENERIC_ID_ENABLE_ROCE)
 	struct devlink *devlink = priv_to_devlink(dev);
 	union devlink_param_value value;
+#endif
 	int ret;
 	bool val;
 
@@ -977,10 +983,12 @@ static ssize_t mlx5_roce_enable_set_enab
 
 	mutex_lock(&dev->roce.state_lock);
 	dev->roce.enabled = val;
+#if defined(HAVE_DEVLINK_PARAM) && defined(HAVE_DEVLINK_PARAM_GENERIC_ID_ENABLE_ROCE)
 	value.vbool = val;
 	devlink_param_driverinit_value_set(devlink,
 					   DEVLINK_PARAM_GENERIC_ID_ENABLE_ROCE,
 					   value);
+#endif
 	mutex_unlock(&dev->roce.state_lock);
 
 	return count;
@@ -1392,9 +1400,11 @@ static int mlx5_load(struct mlx5_core_de
 	mlx5_events_start(dev);
 
 #ifdef CONFIG_PPC
+#ifdef HAVE_PNV_PCI_AS_NOTIFY
 	/* Treat as_notify as best effort feature */
 	mlx5_as_notify_init(dev);
 #endif
+#endif
 
 	mlx5_pagealloc_start(dev);
 
@@ -1433,12 +1443,13 @@ static int mlx5_load(struct mlx5_core_de
 
 	mlx5_accel_ipsec_init(dev);
 
+#ifdef HAVE_UAPI_LINUX_TLS_H
 	err = mlx5_accel_tls_init(dev);
 	if (err) {
 		mlx5_core_err(dev, "TLS device start failed %d\n", err);
 		goto err_tls_start;
 	}
-
+#endif
 	err = mlx5_init_fs(dev);
 	if (err) {
 		mlx5_core_err(dev, "Failed to init flow steering\n");
@@ -1484,8 +1495,10 @@ err_vhca:
 err_set_hca:
 	mlx5_cleanup_fs(dev);
 err_fs:
+#ifdef HAVE_UAPI_LINUX_TLS_H
 	mlx5_accel_tls_cleanup(dev);
 err_tls_start:
+#endif
 	mlx5_accel_ipsec_cleanup(dev);
 	mlx5_fpga_device_stop(dev);
 err_fpga_start:
@@ -1500,8 +1513,10 @@ err_eq_table:
 	mlx5_irq_table_destroy(dev);
 err_irq_table:
 #ifdef CONFIG_PPC
+#ifdef HAVE_PNV_PCI_AS_NOTIFY
 	mlx5_as_notify_cleanup(dev);
 #endif
+#endif
 	mlx5_pagealloc_stop(dev);
 	mlx5_events_stop(dev);
 	mlx5_put_uars_page(dev, dev->priv.uar);
@@ -1519,7 +1534,9 @@ static void mlx5_unload(struct mlx5_core
 	mlx5_vhca_event_stop(dev);
 	mlx5_cleanup_fs(dev);
 	mlx5_accel_ipsec_cleanup(dev);
+#ifdef HAVE_UAPI_LINUX_TLS_H
 	mlx5_accel_tls_cleanup(dev);
+#endif
 	mlx5_fpga_device_stop(dev);
 	mlx5_rsc_dump_cleanup(dev);
 	mlx5_hv_vhca_cleanup(dev->hv_vhca);
@@ -1528,8 +1545,10 @@ static void mlx5_unload(struct mlx5_core
 	mlx5_eq_table_destroy(dev);
 	mlx5_irq_table_destroy(dev);
 #ifdef CONFIG_PPC
+#ifdef HAVE_PNV_PCI_AS_NOTIFY
 	mlx5_as_notify_cleanup(dev);
 #endif
+#endif
 	mlx5_pagealloc_stop(dev);
 	mlx5_events_stop(dev);
 	mlx5_put_uars_page(dev, dev->priv.uar);
@@ -1779,6 +1798,7 @@ void mlx5_mdev_uninit(struct mlx5_core_d
 }
 
 #ifdef CONFIG_PPC
+#ifdef HAVE_PNV_PCI_AS_NOTIFY
 static void mlx5_as_notify_init(struct mlx5_core_dev *dev)
 {
 	struct pci_dev *pdev = dev->pdev;
@@ -1819,6 +1839,7 @@ static void mlx5_as_notify_init(struct m
 
 static void mlx5_as_notify_cleanup(struct mlx5_core_dev *dev) { }
 #endif
+#endif
 
 static int init_one(struct pci_dev *pdev, const struct pci_device_id *id)
 {
@@ -1890,8 +1911,10 @@ static int init_one(struct pci_dev *pdev
 		dev_err(&pdev->dev, "mlx5_crdump_enable failed with error code %d\n", err);
 
 	pci_save_state(pdev);
+#ifdef HAVE_DEVLINK_RELOAD_ENABLE
 	if (!mlx5_core_is_mp_slave(dev))
 		devlink_reload_enable(devlink);
+#endif
 	return 0;
 
 err_load_one:
@@ -1927,7 +1950,9 @@ static void remove_one(struct pci_dev *p
 	if (mlx5_try_fast_unload(dev))
 		dev_dbg(&dev->pdev->dev, "mlx5_try_fast_unload failed\n");
 
+#ifdef HAVE_DEVLINK_RELOAD_DISABLE
 	devlink_reload_disable(devlink);
+#endif
 	mlx5_crdump_disable(dev);
 	mlx5_drain_health_wq(dev);
 	mlx5_unload_one(dev, true);
@@ -2217,6 +2242,10 @@ static struct pci_driver mlx5_core_drive
 	.shutdown	= shutdown,
 	.err_handler	= &mlx5_err_handler,
 	.sriov_configure   = mlx5_core_sriov_configure,
+#ifdef HAVE_SRIOV_GET_SET_MSIX_VEC_COUNT
+	.sriov_get_vf_total_msix = mlx5_sriov_get_vf_total_msix,
+	.sriov_set_msix_vec_count = mlx5_core_sriov_set_msix_vec_count,
+#endif
 };
 
 static void mlx5_core_verify_params(void)
