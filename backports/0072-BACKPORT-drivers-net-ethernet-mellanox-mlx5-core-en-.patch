From: Valentine Fatiev <valentinef@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c

Change-Id: Ia49393680444ecf3aed2dd990da792bb8adc1355
---
 .../net/ethernet/mellanox/mlx5/core/en/tc_tun.c    | 55 ++++++++++++++++++++--
 1 file changed, 50 insertions(+), 5 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c
@@ -1,6 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB */
 /* Copyright (c) 2018 Mellanox Technologies. */
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 #include <net/vxlan.h>
 #include <net/gre.h>
 #include <net/geneve.h>
@@ -12,15 +13,25 @@
 
 struct mlx5e_tc_tunnel *mlx5e_get_tc_tun(struct net_device *tunnel_dev)
 {
+#if !defined(HAVE_TC_INDR_API) && !defined(CONFIG_COMPAT_KERNEL_4_14)
+/* in old kernels with egdev we don't pass the netdev so the filter_dev here
+ * is actually priv->netdev. we only assume and support vxlan */
+	return &vxlan_tunnel;
+#endif
+
 	if (netif_is_vxlan(tunnel_dev))
 		return &vxlan_tunnel;
+#ifdef HAVE_FLOW_DISSECTOR_KEY_ENC_OPTS
 	else if (netif_is_geneve(tunnel_dev))
 		return &geneve_tunnel;
+#endif
 	else if (netif_is_gretap(tunnel_dev) ||
 		 netif_is_ip6gretap(tunnel_dev))
 		return &gre_tunnel;
+#if defined(HAVE_NET_BAREUDP_H) && defined(HAVE_FLOW_DISSECTOR_MPLS_LSE)
 	else if (netif_is_bareudp(tunnel_dev))
 		return &mplsoudp_tunnel;
+#endif
 	else
 		return NULL;
 }
@@ -60,7 +71,11 @@ static int get_route_and_out_devs(struct
 	 * it's a LAG device, use the uplink
 	 */
 	*route_dev = dev;
+#ifdef HAVE_NETDEV_PORT_SAME_PARENT_ID
 	if (!netdev_port_same_parent_id(priv->netdev, real_dev) ||
+#else
+	if (!switchdev_port_same_parent_id(priv->netdev, real_dev) ||
+#endif
 	    dst_is_lag_dev || is_vlan_dev(*route_dev) ||
 	    netif_is_ovs_master(*route_dev))
 		*out_dev = uplink_dev;
@@ -112,7 +127,11 @@ static int mlx5e_route_lookup_ipv4_get(s
 		return -ENETUNREACH;
 	}
 
+#ifdef HAVE_RT_GW_FAMILY
 	if (mlx5_lag_is_multipath(mdev) && rt->rt_gw_family != AF_INET) {
+#else
+	if (mlx5_lag_is_multipath(mdev) && !rt->rt_uses_gateway) {
+#endif
 		ip_rt_put(rt);
 		return -ENETUNREACH;
 	}
@@ -355,7 +374,7 @@ int mlx5e_tc_tun_update_header_ipv4(stru
 	const struct ip_tunnel_key *tun_key = &e->tun_info->key;
 	struct net_device *out_dev, *route_dev = NULL;
 	struct flowi4 fl4 = {};
-	struct neighbour *n;
+	struct neighbour *n = NULL;
 	int ipv4_encap_size;
 	char *encap_header;
 	u8 nud_state, ttl;
@@ -451,7 +470,6 @@ release_neigh:
 	return err;
 }
 
-#if IS_ENABLED(CONFIG_INET) && IS_ENABLED(CONFIG_IPV6)
 static int mlx5e_route_lookup_ipv6_get(struct mlx5e_priv *priv,
 				       struct net_device *mirred_dev,
 				       struct net_device **out_dev,
@@ -463,13 +481,22 @@ static int mlx5e_route_lookup_ipv6_get(s
 	struct dst_entry *dst;
 	struct neighbour *n;
 
+#if IS_ENABLED(CONFIG_INET) && IS_ENABLED(CONFIG_IPV6)
 	int ret;
 
+#ifdef HAVE_IPV6_DST_LOOKUP_FLOW
 	dst = ipv6_stub->ipv6_dst_lookup_flow(dev_net(mirred_dev), NULL, fl6,
 					      NULL);
 	if (IS_ERR(dst))
 		return PTR_ERR(dst);
 
+#elif defined(HAVE_IPV6_DST_LOOKUP_TAKES_NET)
+	ret = ipv6_stub->ipv6_dst_lookup(dev_net(mirred_dev), NULL, &dst,
+					 fl6);
+	if (ret < 0)
+		return ret;
+#endif
+
 	if (out_ttl && !(*out_ttl))
 		*out_ttl = ip6_dst_hoplimit(dst);
 
@@ -481,6 +508,9 @@ static int mlx5e_route_lookup_ipv6_get(s
 		dst_release(dst);
 		return ret;
 	}
+#else
+	return -EOPNOTSUPP;
+#endif
 
 	n = dst_neigh_lookup(dst, &fl6->daddr);
 	dst_release(dst);
@@ -719,8 +749,6 @@ release_neigh:
 	return err;
 }
 
-#endif
-
 int mlx5e_tc_tun_route_lookup(struct mlx5e_priv *priv,
 			      struct mlx5_esw_flow_attr *attr,
 			      struct mlx5_flow_spec *spec)
@@ -829,9 +857,15 @@ int mlx5e_tc_tun_parse(struct net_device
 				       outer_headers);
 	void *headers_v = MLX5_ADDR_OF(fte_match_param, spec->match_value,
 				       outer_headers);
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	struct netlink_ext_ack *extack = f->common.extack;
+#else
+	struct netlink_ext_ack *extack;
+#endif
 	int err = 0;
-
+#ifndef HAVE_TC_CLS_OFFLOAD_EXTACK
+	extack = NULL;
+#endif
 	if (!tunnel) {
 		netdev_warn(priv->netdev,
 			    "decapsulation offload is not supported for %s net device\n",
@@ -845,6 +879,7 @@ int mlx5e_tc_tun_parse(struct net_device
 	if (tunnel->parse_udp_ports) {
 		err = tunnel->parse_udp_ports(priv, spec, f,
 					      headers_c, headers_v);
+
 		if (err)
 			goto out;
 	}
@@ -852,6 +887,7 @@ int mlx5e_tc_tun_parse(struct net_device
 	if (tunnel->parse_tunnel) {
 		err = tunnel->parse_tunnel(priv, spec, f,
 					   headers_c, headers_v);
+
 		if (err)
 			goto out;
 	}
@@ -965,16 +1001,21 @@ int mlx5e_tc_tun_parse_udp_ports(struct
 				 struct flow_cls_offload *f,
 				 void *headers_c,
 				 void *headers_v)
+
 {
 	struct flow_rule *rule = flow_cls_offload_flow_rule(f);
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	struct netlink_ext_ack *extack = f->common.extack;
+#endif
 	struct flow_match_ports enc_ports;
 
 	/* Full udp dst port must be given */
 
 	if (!flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_ENC_PORTS)) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "UDP tunnel decap filter must include enc_dst_port condition");
+#endif
 		netdev_warn(priv->netdev,
 			    "UDP tunnel decap filter must include enc_dst_port condition\n");
 		return -EOPNOTSUPP;
@@ -984,8 +1025,10 @@ int mlx5e_tc_tun_parse_udp_ports(struct
 
 	if (memchr_inv(&enc_ports.mask->dst, 0xff,
 		       sizeof(enc_ports.mask->dst))) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "UDP tunnel decap filter must match enc_dst_port fully");
+#endif
 		netdev_warn(priv->netdev,
 			    "UDP tunnel decap filter must match enc_dst_port fully\n");
 		return -EOPNOTSUPP;
@@ -1013,3 +1056,5 @@ int mlx5e_tc_tun_parse_udp_ports(struct
 
 	return 0;
 }
+
+#endif /* HAVE_TCF_TUNNEL_INFO */
