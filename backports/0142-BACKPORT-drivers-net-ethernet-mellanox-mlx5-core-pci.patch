From: Shay Drory <shayd@nvidia.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c

Change-Id: I474bb06dbd83d53cb5751f30cbe327d1f0636452
---
 .../net/ethernet/mellanox/mlx5/core/pci_irq.c | 77 +++++++++++++++++--
 1 file changed, 70 insertions(+), 7 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
@@ -240,6 +240,10 @@ static void affinity_copy(struct mlx5_ir
 static struct mlx5_irq *irq_request(struct mlx5_irq_pool *pool, int i,
 				    struct cpumask *affinity)
 {
+#ifndef HAVE_PCI_IRQ_API
+	struct mlx5_priv *priv  = &pool->dev->priv;
+	struct msix_entry *msix;
+#endif
 	struct mlx5_core_dev *dev = pool->dev;
 	char name[MLX5_MAX_IRQ_NAME];
 	struct mlx5_irq *irq;
@@ -248,7 +252,12 @@ static struct mlx5_irq *irq_request(stru
 	irq = kzalloc(sizeof(*irq), GFP_KERNEL);
 	if (!irq)
 		return ERR_PTR(-ENOMEM);
+#ifdef HAVE_PCI_IRQ_API
 	irq->irqn = pci_irq_vector(dev->pdev, i);
+#else
+	msix = priv->msix_arr;
+	irq->irqn = msix[i].vector;
+#endif
 	if (!pool->name[0])
 		irq_set_name(pool, name, i);
 	else
@@ -635,6 +644,10 @@ int mlx5_irq_table_create(struct mlx5_co
 	int total_vec;
 	int pf_vec;
 	int err;
+#ifndef HAVE_PCI_IRQ_API
+	struct mlx5_priv* priv = &dev->priv;
+	int i;
+#endif
 
 	if (mlx5_core_is_sf(dev))
 		return 0;
@@ -655,31 +668,76 @@ int mlx5_irq_table_create(struct mlx5_co
 	if (pf_vec < MLX5_PF_IRQ_CTRL_NUM)
 		return -ENOMEM;
 
-	table->cpus = kvcalloc(nr_cpu_ids, sizeof(atomic_t), GFP_KERNEL);
-	if (!table->cpus)
-		return -ENOMEM;
 	total_vec = pf_vec;
 	if (mlx5_sf_max_functions(dev))
 		total_vec += MLX5_IRQ_CTRL_SF_MAX +
 			MLX5_COMP_EQS_PER_SF * mlx5_sf_max_functions(dev);
 
+#ifndef HAVE_PCI_IRQ_API
+	priv->msix_arr = kcalloc(total_vec, sizeof(*priv->msix_arr), GFP_KERNEL);
+	if (!priv->msix_arr)
+		return -ENOMEM;
+
+	for (i = 0; i < total_vec; i++)
+		priv->msix_arr[i].entry = i;
+#endif
+
+#ifdef HAVE_PCI_IRQ_API
 	total_vec = pci_alloc_irq_vectors(dev->pdev, MLX5_PF_IRQ_CTRL_NUM,
 					  total_vec, PCI_IRQ_MSIX);
 	if (total_vec < 0) {
 		err = total_vec;
+		goto err_free_irq;
+	}
+#else /* HAVE_PCI_IRQ_API */
+#ifdef HAVE_PCI_ENABLE_MSIX_RANGE
+	total_vec = pci_enable_msix_range(dev->pdev, priv->msix_arr,
+			MLX5_PF_IRQ_CTRL_NUM, total_vec);
+	if (total_vec < 0) {
+		err = total_vec;
+		goto err_free_irq;
+	}
+
+#else /* HAVE_PCI_ENABLE_MSIX_RANGE */
+retry:
+	err = pci_enable_msix(dev->pdev, priv->msix_arr, total_vec);
+	if (err < 0) {
+		goto err_free_irq;
+	} else if (err > 2) {
+		total_vec = err;
+		goto retry;
+	} else if (err) {
+		mlx5_core_err(dev, "Can't enable the minimum required num of MSIX, %d\n", err);
+		goto err_free_irq;
+	}
+	mlx5_core_dbg(dev, "received %d MSI vectors out of %d requested\n", err, total_vec);
+#endif /* HAVE_PCI_ENABLE_MSIX_RANGE */
+#endif /* HAVE_PCI_IRQ_API */
+
+	table->cpus = kvcalloc(nr_cpu_ids, sizeof(atomic_t), GFP_KERNEL);
+	if (!table->cpus) {
+		err = -ENOMEM;
 		goto err_cpus;
 	}
 	pf_vec = min(pf_vec, total_vec);
 
 	err = irq_pools_init(dev, total_vec - pf_vec, pf_vec);
 	if (err)
-		goto err_alloc_irq;
+		goto err_init_pools;
 
 	return 0;
-err_alloc_irq:
-	pci_free_irq_vectors(dev->pdev);
-err_cpus:
+err_init_pools:
 	kvfree(table->cpus);
+err_cpus:
+#ifdef HAVE_PCI_IRQ_API
+	pci_free_irq_vectors(dev->pdev);
+#else
+	pci_disable_msix(dev->pdev);
+#endif
+err_free_irq:
+#ifndef HAVE_PCI_IRQ_API
+	kfree(priv->msix_arr);
+#endif
 	return err;
 }
 
@@ -695,7 +753,12 @@ void mlx5_irq_table_destroy(struct mlx5_
 	 * to here. Hence, making sure all the irqs are realeased.
 	 */
 	irq_pools_destroy(table);
+#ifdef HAVE_PCI_IRQ_API
 	pci_free_irq_vectors(dev->pdev);
+#else
+	pci_disable_msix(dev->pdev);
+	kfree(dev->priv.msix_arr);
+#endif
 	for_each_online_cpu(cpu)
 		WARN_ON(atomic_read(&table->cpus[cpu]));
 	kvfree(table->cpus);
